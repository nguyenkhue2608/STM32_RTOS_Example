
STM32_RTOS_CreateAndScheduleTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800499c  0800499c  0000599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa8  08004aa8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004ab0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000060  08004b10  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  08004b10  00006c44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001632d  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003086  00000000  00000000  0001c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0001f440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f28  00000000  00000000  000207b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d4f  00000000  00000000  000216e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001495d  00000000  00000000  0002442f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000944c6  00000000  00000000  00038d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e4  00000000  00000000  000cd298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d277c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004984 	.word	0x08004984

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004984 	.word	0x08004984

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa64 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f834 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f898 	bl	80002a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f86c 	bl	800024c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f001 fdd8 	bl	8001d28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000178:	4a0d      	ldr	r2, [pc, #52]	@ (80001b0 <main+0x50>)
 800017a:	2100      	movs	r1, #0
 800017c:	480d      	ldr	r0, [pc, #52]	@ (80001b4 <main+0x54>)
 800017e:	f001 fe1b 	bl	8001db8 <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a0c      	ldr	r2, [pc, #48]	@ (80001b8 <main+0x58>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000188:	4a0c      	ldr	r2, [pc, #48]	@ (80001bc <main+0x5c>)
 800018a:	2100      	movs	r1, #0
 800018c:	480c      	ldr	r0, [pc, #48]	@ (80001c0 <main+0x60>)
 800018e:	f001 fe13 	bl	8001db8 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0b      	ldr	r2, [pc, #44]	@ (80001c4 <main+0x64>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000198:	4a0b      	ldr	r2, [pc, #44]	@ (80001c8 <main+0x68>)
 800019a:	2100      	movs	r1, #0
 800019c:	480b      	ldr	r0, [pc, #44]	@ (80001cc <main+0x6c>)
 800019e:	f001 fe0b 	bl	8001db8 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a0a      	ldr	r2, [pc, #40]	@ (80001d0 <main+0x70>)
 80001a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a8:	f001 fde0 	bl	8001d6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ac:	bf00      	nop
 80001ae:	e7fd      	b.n	80001ac <main+0x4c>
 80001b0:	08004a08 	.word	0x08004a08
 80001b4:	080002cd 	.word	0x080002cd
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	08004a2c 	.word	0x08004a2c
 80001c0:	08000305 	.word	0x08000305
 80001c4:	200000c8 	.word	0x200000c8
 80001c8:	08004a50 	.word	0x08004a50
 80001cc:	0800033d 	.word	0x0800033d
 80001d0:	200000cc 	.word	0x200000cc

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	@ 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	@ 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f004 fae0 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000202:	2300      	movs	r3, #0
 8000204:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fca6 	bl	8000b5c <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000216:	f000 f8bf 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff14 	bl	8001060 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023e:	f000 f8ab 	bl	8000398 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	@ 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000250:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000252:	4a12      	ldr	r2, [pc, #72]	@ (800029c <MX_USART1_UART_Init+0x50>)
 8000254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000256:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800025c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000264:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800026a:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000270:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000272:	220c      	movs	r2, #12
 8000274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800027c:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000282:	4805      	ldr	r0, [pc, #20]	@ (8000298 <MX_USART1_UART_Init+0x4c>)
 8000284:	f001 fae8 	bl	8001858 <HAL_UART_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800028e:	f000 f883 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000007c 	.word	0x2000007c
 800029c:	40013800 	.word	0x40013800

080002a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <MX_GPIO_Init+0x28>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <MX_GPIO_Init+0x28>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <MX_GPIO_Init+0x28>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 const char* taskname = "Running Default Task... \r\n";
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <StartDefaultTask+0x30>)
 80002d6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)taskname, strlen(taskname), HAL_MAX_DELAY);
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff39 	bl	8000150 <strlen>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	68f9      	ldr	r1, [r7, #12]
 80002e8:	4805      	ldr	r0, [pc, #20]	@ (8000300 <StartDefaultTask+0x34>)
 80002ea:	f001 fb05 	bl	80018f8 <HAL_UART_Transmit>
	  osDelay(1000);
 80002ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f2:	f001 fdf3 	bl	8001edc <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)taskname, strlen(taskname), HAL_MAX_DELAY);
 80002f6:	bf00      	nop
 80002f8:	e7ee      	b.n	80002d8 <StartDefaultTask+0xc>
 80002fa:	bf00      	nop
 80002fc:	080049c0 	.word	0x080049c0
 8000300:	2000007c 	.word	0x2000007c

08000304 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	 const char* taskname = "Running Task2... \r\n";
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <StartTask02+0x30>)
 800030e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)taskname, strlen(taskname), HAL_MAX_DELAY);
 8000310:	68f8      	ldr	r0, [r7, #12]
 8000312:	f7ff ff1d 	bl	8000150 <strlen>
 8000316:	4603      	mov	r3, r0
 8000318:	b29a      	uxth	r2, r3
 800031a:	f04f 33ff 	mov.w	r3, #4294967295
 800031e:	68f9      	ldr	r1, [r7, #12]
 8000320:	4805      	ldr	r0, [pc, #20]	@ (8000338 <StartTask02+0x34>)
 8000322:	f001 fae9 	bl	80018f8 <HAL_UART_Transmit>
	  osDelay(1000);
 8000326:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800032a:	f001 fdd7 	bl	8001edc <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)taskname, strlen(taskname), HAL_MAX_DELAY);
 800032e:	bf00      	nop
 8000330:	e7ee      	b.n	8000310 <StartTask02+0xc>
 8000332:	bf00      	nop
 8000334:	080049dc 	.word	0x080049dc
 8000338:	2000007c 	.word	0x2000007c

0800033c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	  const char* taskname = "Running Task2... \r\n";
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <StartTask03+0x30>)
 8000346:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)taskname, strlen(taskname), HAL_MAX_DELAY);
 8000348:	68f8      	ldr	r0, [r7, #12]
 800034a:	f7ff ff01 	bl	8000150 <strlen>
 800034e:	4603      	mov	r3, r0
 8000350:	b29a      	uxth	r2, r3
 8000352:	f04f 33ff 	mov.w	r3, #4294967295
 8000356:	68f9      	ldr	r1, [r7, #12]
 8000358:	4805      	ldr	r0, [pc, #20]	@ (8000370 <StartTask03+0x34>)
 800035a:	f001 facd 	bl	80018f8 <HAL_UART_Transmit>
	  osDelay(1000);
 800035e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000362:	f001 fdbb 	bl	8001edc <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)taskname, strlen(taskname), HAL_MAX_DELAY);
 8000366:	bf00      	nop
 8000368:	e7ee      	b.n	8000348 <StartTask03+0xc>
 800036a:	bf00      	nop
 800036c:	080049dc 	.word	0x080049dc
 8000370:	2000007c 	.word	0x2000007c

08000374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a04      	ldr	r2, [pc, #16]	@ (8000394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d101      	bne.n	800038a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000386:	f000 f969 	bl	800065c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40012c00 	.word	0x40012c00

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <Error_Handler+0x8>

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003aa:	4b18      	ldr	r3, [pc, #96]	@ (800040c <HAL_MspInit+0x68>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a17      	ldr	r2, [pc, #92]	@ (800040c <HAL_MspInit+0x68>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <HAL_MspInit+0x68>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_MspInit+0x68>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a11      	ldr	r2, [pc, #68]	@ (800040c <HAL_MspInit+0x68>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <HAL_MspInit+0x68>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	210f      	movs	r1, #15
 80003de:	f06f 0001 	mvn.w	r0, #1
 80003e2:	f000 fa0c 	bl	80007fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <HAL_MspInit+0x6c>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_MspInit+0x6c>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <HAL_UART_MspInit+0x8c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d131      	bne.n	8000498 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a1a      	ldr	r2, [pc, #104]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 800043a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_UART_MspInit+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	480b      	ldr	r0, [pc, #44]	@ (80004a8 <HAL_UART_MspInit+0x94>)
 800047a:	f000 f9eb 	bl	8000854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800047e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <HAL_UART_MspInit+0x94>)
 8000494:	f000 f9de 	bl	8000854 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40013800 	.word	0x40013800
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800

080004ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08c      	sub	sp, #48	@ 0x30
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80004bc:	2300      	movs	r3, #0
 80004be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004c2:	4b2e      	ldr	r3, [pc, #184]	@ (800057c <HAL_InitTick+0xd0>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a2d      	ldr	r2, [pc, #180]	@ (800057c <HAL_InitTick+0xd0>)
 80004c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b2b      	ldr	r3, [pc, #172]	@ (800057c <HAL_InitTick+0xd0>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 ff2b 	bl	8001340 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004ea:	f000 ff15 	bl	8001318 <HAL_RCC_GetPCLK2Freq>
 80004ee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f2:	4a23      	ldr	r2, [pc, #140]	@ (8000580 <HAL_InitTick+0xd4>)
 80004f4:	fba2 2303 	umull	r2, r3, r2, r3
 80004f8:	0c9b      	lsrs	r3, r3, #18
 80004fa:	3b01      	subs	r3, #1
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004fe:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <HAL_InitTick+0xd8>)
 8000500:	4a21      	ldr	r2, [pc, #132]	@ (8000588 <HAL_InitTick+0xdc>)
 8000502:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <HAL_InitTick+0xd8>)
 8000506:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800050a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800050c:	4a1d      	ldr	r2, [pc, #116]	@ (8000584 <HAL_InitTick+0xd8>)
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <HAL_InitTick+0xd8>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <HAL_InitTick+0xd8>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <HAL_InitTick+0xd8>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000524:	4817      	ldr	r0, [pc, #92]	@ (8000584 <HAL_InitTick+0xd8>)
 8000526:	f000 ff59 	bl	80013dc <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000534:	2b00      	cmp	r3, #0
 8000536:	d11b      	bne.n	8000570 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000538:	4812      	ldr	r0, [pc, #72]	@ (8000584 <HAL_InitTick+0xd8>)
 800053a:	f000 ffa7 	bl	800148c <HAL_TIM_Base_Start_IT>
 800053e:	4603      	mov	r3, r0
 8000540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000544:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000548:	2b00      	cmp	r3, #0
 800054a:	d111      	bne.n	8000570 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800054c:	2019      	movs	r0, #25
 800054e:	f000 f972 	bl	8000836 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d808      	bhi.n	800056a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	2019      	movs	r0, #25
 800055e:	f000 f94e 	bl	80007fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <HAL_InitTick+0xe0>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e002      	b.n	8000570 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000570:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000574:	4618      	mov	r0, r3
 8000576:	3730      	adds	r7, #48	@ 0x30
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	431bde83 	.word	0x431bde83
 8000584:	200000d0 	.word	0x200000d0
 8000588:	40012c00 	.word	0x40012c00
 800058c:	20000004 	.word	0x20000004

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <NMI_Handler+0x4>

08000598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <HardFault_Handler+0x4>

080005a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <MemManage_Handler+0x4>

080005a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <TIM1_UP_IRQHandler+0x10>)
 80005ca:	f000 ffb1 	bl	8001530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000d0 	.word	0x200000d0

080005d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff fff8 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000600:	4c09      	ldr	r4, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f004 f931 	bl	8004874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fda5 	bl	8000160 <main>
  bx lr
 8000616:	4770      	bx	lr
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000620:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8000624:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000628:	20001c44 	.word	0x20001c44

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f8d1 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f7ff ff30 	bl	80004ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff feaa 	bl	80003a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_IncTick+0x1c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <HAL_IncTick+0x20>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <HAL_IncTick+0x20>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000008 	.word	0x20000008
 800067c:	20000118 	.word	0x20000118

08000680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;
 8000684:	4b02      	ldr	r3, [pc, #8]	@ (8000690 <HAL_GetTick+0x10>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	20000118 	.word	0x20000118

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 021f 	and.w	r2, r3, #31
 8000710:	4906      	ldr	r1, [pc, #24]	@ (800072c <__NVIC_EnableIRQ+0x34>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	@ (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	@ (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	@ 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	@ 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff4f 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff64 	bl	80006dc <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ffb2 	bl	8000784 <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff81 	bl	8000730 <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff57 	bl	80006f8 <__NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b08b      	sub	sp, #44	@ 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000866:	e169      	b.n	8000b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000868:	2201      	movs	r2, #1
 800086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8158 	bne.w	8000b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4a9a      	ldr	r2, [pc, #616]	@ (8000af4 <HAL_GPIO_Init+0x2a0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d05e      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 8000890:	4a98      	ldr	r2, [pc, #608]	@ (8000af4 <HAL_GPIO_Init+0x2a0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d875      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 8000896:	4a98      	ldr	r2, [pc, #608]	@ (8000af8 <HAL_GPIO_Init+0x2a4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d058      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 800089c:	4a96      	ldr	r2, [pc, #600]	@ (8000af8 <HAL_GPIO_Init+0x2a4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d86f      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008a2:	4a96      	ldr	r2, [pc, #600]	@ (8000afc <HAL_GPIO_Init+0x2a8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d052      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008a8:	4a94      	ldr	r2, [pc, #592]	@ (8000afc <HAL_GPIO_Init+0x2a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d869      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ae:	4a94      	ldr	r2, [pc, #592]	@ (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d04c      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008b4:	4a92      	ldr	r2, [pc, #584]	@ (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d863      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ba:	4a92      	ldr	r2, [pc, #584]	@ (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d046      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008c0:	4a90      	ldr	r2, [pc, #576]	@ (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d85d      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008c6:	2b12      	cmp	r3, #18
 80008c8:	d82a      	bhi.n	8000920 <HAL_GPIO_Init+0xcc>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d859      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ce:	a201      	add	r2, pc, #4	@ (adr r2, 80008d4 <HAL_GPIO_Init+0x80>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	08000929 	.word	0x08000929
 80008dc:	0800093b 	.word	0x0800093b
 80008e0:	0800097d 	.word	0x0800097d
 80008e4:	08000983 	.word	0x08000983
 80008e8:	08000983 	.word	0x08000983
 80008ec:	08000983 	.word	0x08000983
 80008f0:	08000983 	.word	0x08000983
 80008f4:	08000983 	.word	0x08000983
 80008f8:	08000983 	.word	0x08000983
 80008fc:	08000983 	.word	0x08000983
 8000900:	08000983 	.word	0x08000983
 8000904:	08000983 	.word	0x08000983
 8000908:	08000983 	.word	0x08000983
 800090c:	08000983 	.word	0x08000983
 8000910:	08000983 	.word	0x08000983
 8000914:	08000983 	.word	0x08000983
 8000918:	08000931 	.word	0x08000931
 800091c:	08000945 	.word	0x08000945
 8000920:	4a79      	ldr	r2, [pc, #484]	@ (8000b08 <HAL_GPIO_Init+0x2b4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e02c      	b.n	8000982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e029      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3304      	adds	r3, #4
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e024      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3308      	adds	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e01f      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e01a      	b.n	8000984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000956:	2304      	movs	r3, #4
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e013      	b.n	8000984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	611a      	str	r2, [r3, #16]
          break;
 800096e:	e009      	b.n	8000984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	615a      	str	r2, [r3, #20]
          break;
 800097a:	e003      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x130>
          break;
 8000982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	@ 0xff
 8000988:	d801      	bhi.n	800098e <HAL_GPIO_Init+0x13a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	e001      	b.n	8000992 <HAL_GPIO_Init+0x13e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3304      	adds	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	@ 0xff
 8000998:	d802      	bhi.n	80009a0 <HAL_GPIO_Init+0x14c>
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x152>
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a2:	3b08      	subs	r3, #8
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	210f      	movs	r1, #15
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	6a39      	ldr	r1, [r7, #32]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	431a      	orrs	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80b1 	beq.w	8000b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	@ (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a4c      	ldr	r2, [pc, #304]	@ (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b4a      	ldr	r3, [pc, #296]	@ (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ec:	4a48      	ldr	r2, [pc, #288]	@ (8000b10 <HAL_GPIO_Init+0x2bc>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a40      	ldr	r2, [pc, #256]	@ (8000b14 <HAL_GPIO_Init+0x2c0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d013      	beq.n	8000a40 <HAL_GPIO_Init+0x1ec>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b18 <HAL_GPIO_Init+0x2c4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00d      	beq.n	8000a3c <HAL_GPIO_Init+0x1e8>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3e      	ldr	r2, [pc, #248]	@ (8000b1c <HAL_GPIO_Init+0x2c8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d007      	beq.n	8000a38 <HAL_GPIO_Init+0x1e4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b20 <HAL_GPIO_Init+0x2cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e006      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e004      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a40:	2300      	movs	r3, #0
 8000a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a44:	f002 0203 	and.w	r2, r2, #3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4093      	lsls	r3, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a52:	492f      	ldr	r1, [pc, #188]	@ (8000b10 <HAL_GPIO_Init+0x2bc>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	492c      	ldr	r1, [pc, #176]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	608b      	str	r3, [r1, #8]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4928      	ldr	r1, [pc, #160]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a94:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	4922      	ldr	r1, [pc, #136]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	60cb      	str	r3, [r1, #12]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa2:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	491e      	ldr	r1, [pc, #120]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	4918      	ldr	r1, [pc, #96]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4914      	ldr	r1, [pc, #80]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d021      	beq.n	8000b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	490e      	ldr	r1, [pc, #56]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	600b      	str	r3, [r1, #0]
 8000af0:	e021      	b.n	8000b36 <HAL_GPIO_Init+0x2e2>
 8000af2:	bf00      	nop
 8000af4:	10320000 	.word	0x10320000
 8000af8:	10310000 	.word	0x10310000
 8000afc:	10220000 	.word	0x10220000
 8000b00:	10210000 	.word	0x10210000
 8000b04:	10120000 	.word	0x10120000
 8000b08:	10110000 	.word	0x10110000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40011400 	.word	0x40011400
 8000b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <HAL_GPIO_Init+0x304>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4909      	ldr	r1, [pc, #36]	@ (8000b58 <HAL_GPIO_Init+0x304>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f ae8e 	bne.w	8000868 <HAL_GPIO_Init+0x14>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	372c      	adds	r7, #44	@ 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e272      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8087 	beq.w	8000c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b7c:	4b92      	ldr	r3, [pc, #584]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d00c      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b88:	4b8f      	ldr	r3, [pc, #572]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d112      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
 8000b94:	4b8c      	ldr	r3, [pc, #560]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ba0:	d10b      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba2:	4b89      	ldr	r3, [pc, #548]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d06c      	beq.n	8000c88 <HAL_RCC_OscConfig+0x12c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d168      	bne.n	8000c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e24c      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc2:	d106      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x76>
 8000bc4:	4b80      	ldr	r3, [pc, #512]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e02e      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x98>
 8000bda:	4b7b      	ldr	r3, [pc, #492]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a7a      	ldr	r2, [pc, #488]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b78      	ldr	r3, [pc, #480]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a77      	ldr	r2, [pc, #476]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e01d      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0xbc>
 8000bfe:	4b72      	ldr	r3, [pc, #456]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a71      	ldr	r2, [pc, #452]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e00b      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000c18:	4b6b      	ldr	r3, [pc, #428]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b68      	ldr	r3, [pc, #416]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a67      	ldr	r2, [pc, #412]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fd22 	bl	8000680 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fd1e 	bl	8000680 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	@ 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e200      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0xe4>
 8000c5e:	e014      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd0e 	bl	8000680 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fd0a 	bl	8000680 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	@ 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e1ec      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x10c>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d063      	beq.n	8000d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c96:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca2:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d11c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
 8000cae:	4b46      	ldr	r3, [pc, #280]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d116      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	4b43      	ldr	r3, [pc, #268]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d001      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e1c0      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4939      	ldr	r1, [pc, #228]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	e03a      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d020      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf0:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fcc3 	bl	8000680 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fcbf 	bl	8000680 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e1a1      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4927      	ldr	r1, [pc, #156]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fca2 	bl	8000680 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fc9e 	bl	8000680 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e180      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d03a      	beq.n	8000de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d019      	beq.n	8000da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc82 	bl	8000680 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fc7e 	bl	8000680 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e160      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fafe 	bl	80013a0 <RCC_Delay>
 8000da4:	e01c      	b.n	8000de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc68 	bl	8000680 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	e00f      	b.n	8000dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc64 	bl	8000680 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d908      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e146      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	42420000 	.word	0x42420000
 8000dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd4:	4b92      	ldr	r3, [pc, #584]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e9      	bne.n	8000db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80a6 	beq.w	8000f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df2:	4b8b      	ldr	r3, [pc, #556]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b88      	ldr	r3, [pc, #544]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a87      	ldr	r2, [pc, #540]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b85      	ldr	r3, [pc, #532]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1a:	4b82      	ldr	r3, [pc, #520]	@ (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d118      	bne.n	8000e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e26:	4b7f      	ldr	r3, [pc, #508]	@ (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e32:	f7ff fc25 	bl	8000680 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3a:	f7ff fc21 	bl	8000680 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	@ 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e103      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4b75      	ldr	r3, [pc, #468]	@ (8001024 <HAL_RCC_OscConfig+0x4c8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x312>
 8000e60:	4b6f      	ldr	r3, [pc, #444]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4a6e      	ldr	r2, [pc, #440]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6213      	str	r3, [r2, #32]
 8000e6c:	e02d      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x334>
 8000e76:	4b6a      	ldr	r3, [pc, #424]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a69      	ldr	r2, [pc, #420]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6213      	str	r3, [r2, #32]
 8000e82:	4b67      	ldr	r3, [pc, #412]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a66      	ldr	r2, [pc, #408]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	e01c      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d10c      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x356>
 8000e98:	4b61      	ldr	r3, [pc, #388]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a60      	ldr	r2, [pc, #384]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	4b5e      	ldr	r3, [pc, #376]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	e00b      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	4b58      	ldr	r3, [pc, #352]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a57      	ldr	r2, [pc, #348]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d015      	beq.n	8000efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fbd5 	bl	8000680 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fbd1 	bl	8000680 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e0b1      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ee      	beq.n	8000eda <HAL_RCC_OscConfig+0x37e>
 8000efc:	e014      	b.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fbbf 	bl	8000680 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fbbb 	bl	8000680 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e09b      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	4b40      	ldr	r3, [pc, #256]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ee      	bne.n	8000f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d105      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a3b      	ldr	r2, [pc, #236]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8087 	beq.w	8001052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f44:	4b36      	ldr	r3, [pc, #216]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d061      	beq.n	8001014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d146      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f58:	4b33      	ldr	r3, [pc, #204]	@ (8001028 <HAL_RCC_OscConfig+0x4cc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb8f 	bl	8000680 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fb8b 	bl	8000680 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e06d      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f78:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f8c:	d108      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	4921      	ldr	r1, [pc, #132]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a19      	ldr	r1, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	491b      	ldr	r1, [pc, #108]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <HAL_RCC_OscConfig+0x4cc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb5f 	bl	8000680 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fb5b 	bl	8000680 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e03d      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x46a>
 8000fe4:	e035      	b.n	8001052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <HAL_RCC_OscConfig+0x4cc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb48 	bl	8000680 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff4:	f7ff fb44 	bl	8000680 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e026      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x498>
 8001012:	e01e      	b.n	8001052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d107      	bne.n	800102c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e019      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
 8001020:	40021000 	.word	0x40021000
 8001024:	40007000 	.word	0x40007000
 8001028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_RCC_OscConfig+0x500>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	429a      	cmp	r2, r3
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0d0      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d910      	bls.n	80010a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	4b67      	ldr	r3, [pc, #412]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 0207 	bic.w	r2, r3, #7
 800108a:	4965      	ldr	r1, [pc, #404]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b63      	ldr	r3, [pc, #396]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0b8      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010bc:	4b59      	ldr	r3, [pc, #356]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a58      	ldr	r2, [pc, #352]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d4:	4b53      	ldr	r3, [pc, #332]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	494d      	ldr	r1, [pc, #308]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d040      	beq.n	8001180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e07f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111e:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e073      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4b3d      	ldr	r3, [pc, #244]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06b      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f023 0203 	bic.w	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4936      	ldr	r1, [pc, #216]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fa96 	bl	8000680 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	e00a      	b.n	800116e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001158:	f7ff fa92 	bl	8000680 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e053      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 020c 	and.w	r2, r3, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	429a      	cmp	r2, r3
 800117e:	d1eb      	bne.n	8001158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d210      	bcs.n	80011b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0207 	bic.w	r2, r3, #7
 8001196:	4922      	ldr	r1, [pc, #136]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e032      	b.n	8001216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4916      	ldr	r1, [pc, #88]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	490e      	ldr	r1, [pc, #56]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ee:	f000 f821 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 80011f2:	4602      	mov	r2, r0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	490a      	ldr	r1, [pc, #40]	@ (8001228 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	5ccb      	ldrb	r3, [r1, r3]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <HAL_RCC_ClockConfig+0x1cc>)
 8001208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_RCC_ClockConfig+0x1d0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f94c 	bl	80004ac <HAL_InitTick>

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000
 8001224:	40021000 	.word	0x40021000
 8001228:	08004a74 	.word	0x08004a74
 800122c:	20000000 	.word	0x20000000
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d002      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x30>
 800125e:	2b08      	cmp	r3, #8
 8001260:	d003      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x36>
 8001262:	e027      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001266:	613b      	str	r3, [r7, #16]
      break;
 8001268:	e027      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d010      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	0c5b      	lsrs	r3, r3, #17
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001296:	fb03 f202 	mul.w	r2, r3, r2
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e004      	b.n	80012ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	613b      	str	r3, [r7, #16]
      break;
 80012b2:	e002      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x98>)
 80012b6:	613b      	str	r3, [r7, #16]
      break;
 80012b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ba:	693b      	ldr	r3, [r7, #16]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	007a1200 	.word	0x007a1200
 80012d0:	08004a8c 	.word	0x08004a8c
 80012d4:	08004a9c 	.word	0x08004a9c
 80012d8:	003d0900 	.word	0x003d0900

080012dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e0:	4b02      	ldr	r3, [pc, #8]	@ (80012ec <HAL_RCC_GetHCLKFreq+0x10>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000000 	.word	0x20000000

080012f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012f4:	f7ff fff2 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	4903      	ldr	r1, [pc, #12]	@ (8001314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	08004a84 	.word	0x08004a84

08001318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800131c:	f7ff ffde 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	0adb      	lsrs	r3, r3, #11
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4903      	ldr	r1, [pc, #12]	@ (800133c <HAL_RCC_GetPCLK2Freq+0x24>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	08004a84 	.word	0x08004a84

08001340 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	220f      	movs	r2, #15
 800134e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_GetClockConfig+0x58>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <HAL_RCC_GetClockConfig+0x58>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_RCC_GetClockConfig+0x58>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_RCC_GetClockConfig+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_RCC_GetClockConfig+0x5c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0207 	and.w	r2, r3, #7
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40022000 	.word	0x40022000

080013a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <RCC_Delay+0x34>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <RCC_Delay+0x38>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0a5b      	lsrs	r3, r3, #9
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013bc:	bf00      	nop
  }
  while (Delay --);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	60fa      	str	r2, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f9      	bne.n	80013bc <RCC_Delay+0x1c>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000000 	.word	0x20000000
 80013d8:	10624dd3 	.word	0x10624dd3

080013dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e041      	b.n	8001472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f839 	bl	800147a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f000 f99c 	bl	8001758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d001      	beq.n	80014a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e03a      	b.n	800151a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a18      	ldr	r2, [pc, #96]	@ (8001524 <HAL_TIM_Base_Start_IT+0x98>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00e      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x58>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ce:	d009      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x58>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <HAL_TIM_Base_Start_IT+0x9c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x58>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a13      	ldr	r2, [pc, #76]	@ (800152c <HAL_TIM_Base_Start_IT+0xa0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d111      	bne.n	8001508 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d010      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001506:	e007      	b.n	8001518 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40000400 	.word	0x40000400
 800152c:	40000800 	.word	0x40000800

08001530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d020      	beq.n	8001594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01b      	beq.n	8001594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f06f 0202 	mvn.w	r2, #2
 8001564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f8d1 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001580:	e005      	b.n	800158e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8c4 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f8d3 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d020      	beq.n	80015e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01b      	beq.n	80015e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0204 	mvn.w	r2, #4
 80015b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8ab 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f89e 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8ad 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d020      	beq.n	800162c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01b      	beq.n	800162c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0208 	mvn.w	r2, #8
 80015fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2204      	movs	r2, #4
 8001602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f885 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001618:	e005      	b.n	8001626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f878 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f887 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	d020      	beq.n	8001678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01b      	beq.n	8001678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0210 	mvn.w	r2, #16
 8001648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2208      	movs	r2, #8
 800164e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f85f 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001664:	e005      	b.n	8001672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f852 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f861 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00c      	beq.n	800169c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7fe fe6c 	bl	8000374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00c      	beq.n	80016c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8c3 	bl	8001846 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f831 	bl	8001746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00c      	beq.n	8001708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0220 	mvn.w	r2, #32
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f896 	bl	8001834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a2f      	ldr	r2, [pc, #188]	@ (8001828 <TIM_Base_SetConfig+0xd0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00b      	beq.n	8001788 <TIM_Base_SetConfig+0x30>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001776:	d007      	beq.n	8001788 <TIM_Base_SetConfig+0x30>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a2c      	ldr	r2, [pc, #176]	@ (800182c <TIM_Base_SetConfig+0xd4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d003      	beq.n	8001788 <TIM_Base_SetConfig+0x30>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <TIM_Base_SetConfig+0xd8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d108      	bne.n	800179a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800178e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <TIM_Base_SetConfig+0xd0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00b      	beq.n	80017ba <TIM_Base_SetConfig+0x62>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a8:	d007      	beq.n	80017ba <TIM_Base_SetConfig+0x62>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <TIM_Base_SetConfig+0xd4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d003      	beq.n	80017ba <TIM_Base_SetConfig+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <TIM_Base_SetConfig+0xd8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d108      	bne.n	80017cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <TIM_Base_SetConfig+0xd0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d103      	bne.n	8001800 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
  }
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40000400 	.word	0x40000400
 8001830:	40000800 	.word	0x40000800

08001834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e042      	b.n	80018f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7fe fdc8 	bl	8000414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	@ 0x24
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800189a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f971 	bl	8001b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80018c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b20      	cmp	r3, #32
 8001916:	d175      	bne.n	8001a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_UART_Transmit+0x2c>
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e06e      	b.n	8001a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2221      	movs	r2, #33	@ 0x21
 8001932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001936:	f7fe fea3 	bl	8000680 <HAL_GetTick>
 800193a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	88fa      	ldrh	r2, [r7, #6]
 8001940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001950:	d108      	bne.n	8001964 <HAL_UART_Transmit+0x6c>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d104      	bne.n	8001964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e003      	b.n	800196c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800196c:	e02e      	b.n	80019cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2200      	movs	r2, #0
 8001976:	2180      	movs	r1, #128	@ 0x80
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 f848 	bl	8001a0e <UART_WaitOnFlagUntilTimeout>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e03a      	b.n	8001a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	3302      	adds	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	e007      	b.n	80019be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3301      	adds	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1cb      	bne.n	800196e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2200      	movs	r2, #0
 80019de:	2140      	movs	r1, #64	@ 0x40
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f814 	bl	8001a0e <UART_WaitOnFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e006      	b.n	8001a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a1e:	e03b      	b.n	8001a98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a26:	d037      	beq.n	8001a98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a28:	f7fe fe2a 	bl	8000680 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d302      	bcc.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e03a      	b.n	8001ab8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d023      	beq.n	8001a98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b80      	cmp	r3, #128	@ 0x80
 8001a54:	d020      	beq.n	8001a98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b40      	cmp	r3, #64	@ 0x40
 8001a5a:	d01d      	beq.n	8001a98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d116      	bne.n	8001a98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f81d 	bl	8001ac0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e00f      	b.n	8001ab8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d0b4      	beq.n	8001a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b095      	sub	sp, #84	@ 0x54
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	330c      	adds	r3, #12
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad2:	e853 3f00 	ldrex	r3, [r3]
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ae8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001af0:	e841 2300 	strex	r3, r2, [r1]
 8001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e5      	bne.n	8001ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3314      	adds	r3, #20
 8001b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	e853 3f00 	ldrex	r3, [r3]
 8001b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3314      	adds	r3, #20
 8001b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b24:	e841 2300 	strex	r3, r2, [r1]
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e5      	bne.n	8001afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d119      	bne.n	8001b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	e853 3f00 	ldrex	r3, [r3]
 8001b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f023 0310 	bic.w	r3, r3, #16
 8001b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	330c      	adds	r3, #12
 8001b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b58:	61ba      	str	r2, [r7, #24]
 8001b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5c:	6979      	ldr	r1, [r7, #20]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	e841 2300 	strex	r3, r2, [r1]
 8001b64:	613b      	str	r3, [r7, #16]
   return(result);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e5      	bne.n	8001b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b7a:	bf00      	nop
 8001b7c:	3754      	adds	r7, #84	@ 0x54
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001bbe:	f023 030c 	bic.w	r3, r3, #12
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c98 <UART_SetConfig+0x114>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d103      	bne.n	8001bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bec:	f7ff fb94 	bl	8001318 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	e002      	b.n	8001bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bf4:	f7ff fb7c 	bl	80012f0 <HAL_RCC_GetPCLK1Freq>
 8001bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009a      	lsls	r2, r3, #2
 8001c04:	441a      	add	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <UART_SetConfig+0x118>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	0119      	lsls	r1, r3, #4
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	009a      	lsls	r2, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <UART_SetConfig+0x118>)
 8001c32:	fba3 0302 	umull	r0, r3, r3, r2
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2064      	movs	r0, #100	@ 0x64
 8001c3a:	fb00 f303 	mul.w	r3, r0, r3
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	3332      	adds	r3, #50	@ 0x32
 8001c44:	4a15      	ldr	r2, [pc, #84]	@ (8001c9c <UART_SetConfig+0x118>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c50:	4419      	add	r1, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <UART_SetConfig+0x118>)
 8001c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2064      	movs	r0, #100	@ 0x64
 8001c72:	fb00 f303 	mul.w	r3, r0, r3
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	3332      	adds	r3, #50	@ 0x32
 8001c7c:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <UART_SetConfig+0x118>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	440a      	add	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	51eb851f 	.word	0x51eb851f

08001ca0 <__NVIC_SetPriority>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Handler+0x1c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001cfc:	f001 fd38 	bl	8003770 <xTaskGetSchedulerState>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001d06:	f002 fadf 	bl	80042c8 <xPortSysTickHandler>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f06f 0004 	mvn.w	r0, #4
 8001d1e:	f7ff ffbf 	bl	8001ca0 <__NVIC_SetPriority>
#endif
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d2e:	f3ef 8305 	mrs	r3, IPSR
 8001d32:	603b      	str	r3, [r7, #0]
  return(result);
 8001d34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001d3a:	f06f 0305 	mvn.w	r3, #5
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	e00c      	b.n	8001d5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <osKernelInitialize+0x40>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <osKernelInitialize+0x40>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e002      	b.n	8001d5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	2000011c 	.word	0x2000011c

08001d6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d72:	f3ef 8305 	mrs	r3, IPSR
 8001d76:	603b      	str	r3, [r7, #0]
  return(result);
 8001d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001d7e:	f06f 0305 	mvn.w	r3, #5
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	e010      	b.n	8001da8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <osKernelStart+0x48>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d109      	bne.n	8001da2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001d8e:	f7ff ffc1 	bl	8001d14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <osKernelStart+0x48>)
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001d98:	f001 f88a 	bl	8002eb0 <vTaskStartScheduler>
      stat = osOK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	e002      	b.n	8001da8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000011c 	.word	0x2000011c

08001db8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	@ 0x38
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dc8:	f3ef 8305 	mrs	r3, IPSR
 8001dcc:	617b      	str	r3, [r7, #20]
  return(result);
 8001dce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d17e      	bne.n	8001ed2 <osThreadNew+0x11a>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d07b      	beq.n	8001ed2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001dde:	2318      	movs	r3, #24
 8001de0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d045      	beq.n	8001e7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <osThreadNew+0x48>
        name = attr->name;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <osThreadNew+0x6e>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b38      	cmp	r3, #56	@ 0x38
 8001e18:	d805      	bhi.n	8001e26 <osThreadNew+0x6e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <osThreadNew+0x72>
        return (NULL);
 8001e26:	2300      	movs	r3, #0
 8001e28:	e054      	b.n	8001ed4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00e      	beq.n	8001e60 <osThreadNew+0xa8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2ba7      	cmp	r3, #167	@ 0xa7
 8001e48:	d90a      	bls.n	8001e60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <osThreadNew+0xa8>
        mem = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e010      	b.n	8001e82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <osThreadNew+0xca>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d108      	bne.n	8001e82 <osThreadNew+0xca>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <osThreadNew+0xca>
          mem = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e001      	b.n	8001e82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d110      	bne.n	8001eaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001e90:	9202      	str	r2, [sp, #8]
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	6a3a      	ldr	r2, [r7, #32]
 8001e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fe12 	bl	8002ac8 <xTaskCreateStatic>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e013      	b.n	8001ed2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d110      	bne.n	8001ed2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fe60 	bl	8002b88 <xTaskCreate>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d001      	beq.n	8001ed2 <osThreadNew+0x11a>
            hTask = NULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ed2:	693b      	ldr	r3, [r7, #16]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3728      	adds	r7, #40	@ 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ee4:	f3ef 8305 	mrs	r3, IPSR
 8001ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001eea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <osDelay+0x1c>
    stat = osErrorISR;
 8001ef0:	f06f 0305 	mvn.w	r3, #5
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e007      	b.n	8001f08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 ff9e 	bl	8002e44 <vTaskDelay>
    }
  }

  return (stat);
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <vApplicationGetIdleTaskMemory+0x28>)
 8001f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000120 	.word	0x20000120
 8001f40:	200001c8 	.word	0x200001c8

08001f44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4a06      	ldr	r2, [pc, #24]	@ (8001f74 <vApplicationGetTimerTaskMemory+0x30>)
 8001f5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200003c8 	.word	0x200003c8
 8001f74:	20000470 	.word	0x20000470

08001f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f103 0208 	add.w	r2, r3, #8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f103 0208 	add.w	r2, r3, #8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 0208 	add.w	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202a:	d103      	bne.n	8002034 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e00c      	b.n	800204e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3308      	adds	r3, #8
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e002      	b.n	8002042 <vListInsert+0x2e>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	d2f6      	bcs.n	800203c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	601a      	str	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6892      	ldr	r2, [r2, #8]
 800209a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6852      	ldr	r2, [r2, #4]
 80020a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d103      	bne.n	80020b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
	...

080020d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10b      	bne.n	8002104 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002104:	f002 f862 	bl	80041cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	441a      	add	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002134:	3b01      	subs	r3, #1
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	22ff      	movs	r2, #255	@ 0xff
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d114      	bne.n	8002184 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3310      	adds	r3, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f001 f93c 	bl	80033e4 <xTaskRemoveFromEventList>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d012      	beq.n	8002198 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <xQueueGenericReset+0xd0>)
 8002174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	e009      	b.n	8002198 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3310      	adds	r3, #16
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fef5 	bl	8001f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3324      	adds	r3, #36	@ 0x24
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fef0 	bl	8001f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002198:	f002 f848 	bl	800422c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000ed04 	.word	0xe000ed04

080021ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	@ 0x38
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <xQueueGenericCreateStatic+0x56>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <xQueueGenericCreateStatic+0x5a>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <xQueueGenericCreateStatic+0x5c>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	623b      	str	r3, [r7, #32]
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <xQueueGenericCreateStatic+0x84>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <xQueueGenericCreateStatic+0x88>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <xQueueGenericCreateStatic+0x8a>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800223a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	61fb      	str	r3, [r7, #28]
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	e7fd      	b.n	800224e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002252:	2350      	movs	r3, #80	@ 0x50
 8002254:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b50      	cmp	r3, #80	@ 0x50
 800225a:	d00b      	beq.n	8002274 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800225c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	61bb      	str	r3, [r7, #24]
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002274:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800227a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002288:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800228c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f805 	bl	80022a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800229e:	4618      	mov	r0, r3
 80022a0:	3730      	adds	r7, #48	@ 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e002      	b.n	80022c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022d4:	2101      	movs	r1, #1
 80022d6:	69b8      	ldr	r0, [r7, #24]
 80022d8:	f7ff fefe 	bl	80020d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	@ 0x38
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <xQueueGenericSend+0x34>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <xQueueGenericSend+0x42>
 8002326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <xQueueGenericSend+0x46>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <xQueueGenericSend+0x48>
 8002332:	2300      	movs	r3, #0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <xQueueGenericSend+0x64>
	__asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <xQueueGenericSend+0x72>
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <xQueueGenericSend+0x76>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <xQueueGenericSend+0x78>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <xQueueGenericSend+0x94>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	623b      	str	r3, [r7, #32]
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002380:	f001 f9f6 	bl	8003770 <xTaskGetSchedulerState>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <xQueueGenericSend+0xa4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <xQueueGenericSend+0xa8>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <xQueueGenericSend+0xaa>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	61fb      	str	r3, [r7, #28]
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023b2:	f001 ff0b 	bl	80041cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <xQueueGenericSend+0xdc>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d129      	bne.n	800241c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ce:	f000 fa0f 	bl	80027f0 <prvCopyDataToQueue>
 80023d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d010      	beq.n	80023fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	3324      	adds	r3, #36	@ 0x24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 ffff 	bl	80033e4 <xTaskRemoveFromEventList>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80023ec:	4b3f      	ldr	r3, [pc, #252]	@ (80024ec <xQueueGenericSend+0x200>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	e00a      	b.n	8002414 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80023fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <xQueueGenericSend+0x200>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002414:	f001 ff0a 	bl	800422c <vPortExitCritical>
				return pdPASS;
 8002418:	2301      	movs	r3, #1
 800241a:	e063      	b.n	80024e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002422:	f001 ff03 	bl	800422c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002426:	2300      	movs	r3, #0
 8002428:	e05c      	b.n	80024e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800242a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4618      	mov	r0, r3
 8002436:	f001 f839 	bl	80034ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800243a:	2301      	movs	r3, #1
 800243c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800243e:	f001 fef5 	bl	800422c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002442:	f000 fda5 	bl	8002f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002446:	f001 fec1 	bl	80041cc <vPortEnterCritical>
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002450:	b25b      	sxtb	r3, r3
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d103      	bne.n	8002460 <xQueueGenericSend+0x174>
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002466:	b25b      	sxtb	r3, r3
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d103      	bne.n	8002476 <xQueueGenericSend+0x18a>
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002476:	f001 fed9 	bl	800422c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800247a:	1d3a      	adds	r2, r7, #4
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f001 f828 	bl	80034d8 <xTaskCheckForTimeOut>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d124      	bne.n	80024d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800248e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002490:	f000 faa6 	bl	80029e0 <prvIsQueueFull>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d018      	beq.n	80024cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	3310      	adds	r3, #16
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 ff4c 	bl	8003340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024aa:	f000 fa31 	bl	8002910 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024ae:	f000 fd7d 	bl	8002fac <xTaskResumeAll>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f47f af7c 	bne.w	80023b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <xQueueGenericSend+0x200>)
 80024bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	e772      	b.n	80023b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80024cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024ce:	f000 fa1f 	bl	8002910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024d2:	f000 fd6b 	bl	8002fac <xTaskResumeAll>
 80024d6:	e76c      	b.n	80023b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80024d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024da:	f000 fa19 	bl	8002910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024de:	f000 fd65 	bl	8002fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80024e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3738      	adds	r7, #56	@ 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	e000ed04 	.word	0xe000ed04

080024f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b090      	sub	sp, #64	@ 0x40
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <xQueueGenericSendFromISR+0x3e>
 8002526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <xQueueGenericSendFromISR+0x42>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <xQueueGenericSendFromISR+0x44>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d103      	bne.n	800255e <xQueueGenericSendFromISR+0x6e>
 8002556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <xQueueGenericSendFromISR+0x72>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <xQueueGenericSendFromISR+0x74>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	623b      	str	r3, [r7, #32]
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002580:	f001 fee6 	bl	8004350 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002584:	f3ef 8211 	mrs	r2, BASEPRI
 8002588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	61fa      	str	r2, [r7, #28]
 800259a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800259c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d302      	bcc.n	80025b2 <xQueueGenericSendFromISR+0xc2>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d12f      	bne.n	8002612 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80025b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025c8:	f000 f912 	bl	80027f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80025cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d112      	bne.n	80025fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	3324      	adds	r3, #36	@ 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fefe 	bl	80033e4 <xTaskRemoveFromEventList>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00e      	beq.n	800260c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e007      	b.n	800260c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002600:	3301      	adds	r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	b25a      	sxtb	r2, r3
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800260c:	2301      	movs	r3, #1
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002610:	e001      	b.n	8002616 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002612:	2300      	movs	r3, #0
 8002614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002618:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002620:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002624:	4618      	mov	r0, r3
 8002626:	3740      	adds	r7, #64	@ 0x40
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	@ 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <xQueueReceive+0x32>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	623b      	str	r3, [r7, #32]
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <xQueueReceive+0x40>
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <xQueueReceive+0x44>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <xQueueReceive+0x46>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <xQueueReceive+0x62>
	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	61fb      	str	r3, [r7, #28]
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800268e:	f001 f86f 	bl	8003770 <xTaskGetSchedulerState>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <xQueueReceive+0x72>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <xQueueReceive+0x76>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <xQueueReceive+0x78>
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <xQueueReceive+0x94>
	__asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	61bb      	str	r3, [r7, #24]
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026c0:	f001 fd84 	bl	80041cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01f      	beq.n	8002710 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d4:	f000 f8f6 	bl	80028c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	1e5a      	subs	r2, r3, #1
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00f      	beq.n	8002708 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	3310      	adds	r3, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fe79 	bl	80033e4 <xTaskRemoveFromEventList>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80026f8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ec <xQueueReceive+0x1c0>)
 80026fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002708:	f001 fd90 	bl	800422c <vPortExitCritical>
				return pdPASS;
 800270c:	2301      	movs	r3, #1
 800270e:	e069      	b.n	80027e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002716:	f001 fd89 	bl	800422c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800271a:	2300      	movs	r3, #0
 800271c:	e062      	b.n	80027e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4618      	mov	r0, r3
 800272a:	f000 febf 	bl	80034ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800272e:	2301      	movs	r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002732:	f001 fd7b 	bl	800422c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002736:	f000 fc2b 	bl	8002f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800273a:	f001 fd47 	bl	80041cc <vPortEnterCritical>
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d103      	bne.n	8002754 <xQueueReceive+0x128>
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800275a:	b25b      	sxtb	r3, r3
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d103      	bne.n	800276a <xQueueReceive+0x13e>
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800276a:	f001 fd5f 	bl	800422c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800276e:	1d3a      	adds	r2, r7, #4
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f000 feae 	bl	80034d8 <xTaskCheckForTimeOut>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d123      	bne.n	80027ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002784:	f000 f916 	bl	80029b4 <prvIsQueueEmpty>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d017      	beq.n	80027be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002790:	3324      	adds	r3, #36	@ 0x24
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fdd2 	bl	8003340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800279c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800279e:	f000 f8b7 	bl	8002910 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027a2:	f000 fc03 	bl	8002fac <xTaskResumeAll>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d189      	bne.n	80026c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <xQueueReceive+0x1c0>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	e780      	b.n	80026c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027c0:	f000 f8a6 	bl	8002910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027c4:	f000 fbf2 	bl	8002fac <xTaskResumeAll>
 80027c8:	e77a      	b.n	80026c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80027ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027cc:	f000 f8a0 	bl	8002910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027d0:	f000 fbec 	bl	8002fac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027d6:	f000 f8ed 	bl	80029b4 <prvIsQueueEmpty>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f43f af6f 	beq.w	80026c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3730      	adds	r7, #48	@ 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d14d      	bne.n	80028b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 ffc6 	bl	80037ac <xTaskPriorityDisinherit>
 8002820:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	e043      	b.n	80028b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d119      	bne.n	8002864 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6858      	ldr	r0, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	461a      	mov	r2, r3
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	f002 f840 	bl	80048c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	441a      	add	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	d32b      	bcc.n	80028b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	e026      	b.n	80028b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68d8      	ldr	r0, [r3, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	461a      	mov	r2, r3
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	f002 f826 	bl	80048c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	425b      	negs	r3, r3
 800287e:	441a      	add	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	425b      	negs	r3, r3
 800289a:	441a      	add	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d105      	bne.n	80028b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80028ba:	697b      	ldr	r3, [r7, #20]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d018      	beq.n	8002908 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	441a      	add	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d303      	bcc.n	80028f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68d9      	ldr	r1, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	461a      	mov	r2, r3
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	f001 ffdc 	bl	80048c0 <memcpy>
	}
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002918:	f001 fc58 	bl	80041cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002922:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002924:	e011      	b.n	800294a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3324      	adds	r3, #36	@ 0x24
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fd56 	bl	80033e4 <xTaskRemoveFromEventList>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800293e:	f000 fe2f 	bl	80035a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	3b01      	subs	r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dce9      	bgt.n	8002926 <prvUnlockQueue+0x16>
 8002952:	e000      	b.n	8002956 <prvUnlockQueue+0x46>
					break;
 8002954:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	22ff      	movs	r2, #255	@ 0xff
 800295a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800295e:	f001 fc65 	bl	800422c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002962:	f001 fc33 	bl	80041cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800296c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800296e:	e011      	b.n	8002994 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3310      	adds	r3, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fd31 	bl	80033e4 <xTaskRemoveFromEventList>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002988:	f000 fe0a 	bl	80035a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800298c:	7bbb      	ldrb	r3, [r7, #14]
 800298e:	3b01      	subs	r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002998:	2b00      	cmp	r3, #0
 800299a:	dce9      	bgt.n	8002970 <prvUnlockQueue+0x60>
 800299c:	e000      	b.n	80029a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800299e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	22ff      	movs	r2, #255	@ 0xff
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80029a8:	f001 fc40 	bl	800422c <vPortExitCritical>
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029bc:	f001 fc06 	bl	80041cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e001      	b.n	80029d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029d2:	f001 fc2b 	bl	800422c <vPortExitCritical>

	return xReturn;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029e8:	f001 fbf0 	bl	80041cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d102      	bne.n	80029fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e001      	b.n	8002a02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a02:	f001 fc13 	bl	800422c <vPortExitCritical>

	return xReturn;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e014      	b.n	8002a4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a20:	4a0e      	ldr	r2, [pc, #56]	@ (8002a5c <vQueueAddToRegistry+0x4c>)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a2c:	490b      	ldr	r1, [pc, #44]	@ (8002a5c <vQueueAddToRegistry+0x4c>)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a36:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <vQueueAddToRegistry+0x4c>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002a42:	e006      	b.n	8002a52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b07      	cmp	r3, #7
 8002a4e:	d9e7      	bls.n	8002a20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000870 	.word	0x20000870

08002a60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a70:	f001 fbac 	bl	80041cc <vPortEnterCritical>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d103      	bne.n	8002a8a <vQueueWaitForMessageRestricted+0x2a>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d103      	bne.n	8002aa0 <vQueueWaitForMessageRestricted+0x40>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002aa0:	f001 fbc4 	bl	800422c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3324      	adds	r3, #36	@ 0x24
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fc69 	bl	800338c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f7ff ff28 	bl	8002910 <prvUnlockQueue>
	}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08e      	sub	sp, #56	@ 0x38
 8002acc:	af04      	add	r7, sp, #16
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	623b      	str	r3, [r7, #32]
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	61fb      	str	r3, [r7, #28]
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	e7fd      	b.n	8002b0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b12:	23a8      	movs	r3, #168	@ 0xa8
 8002b14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2ba8      	cmp	r3, #168	@ 0xa8
 8002b1a:	d00b      	beq.n	8002b34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	61bb      	str	r3, [r7, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01e      	beq.n	8002b7a <xTaskCreateStatic+0xb2>
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01b      	beq.n	8002b7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b54:	2300      	movs	r3, #0
 8002b56:	9303      	str	r3, [sp, #12]
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	9302      	str	r3, [sp, #8]
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f851 	bl	8002c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b74:	f000 f8f6 	bl	8002d64 <prvAddNewTaskToReadyList>
 8002b78:	e001      	b.n	8002b7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b7e:	697b      	ldr	r3, [r7, #20]
	}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3728      	adds	r7, #40	@ 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	@ 0x30
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fc17 	bl	80043d0 <pvPortMalloc>
 8002ba2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002baa:	20a8      	movs	r0, #168	@ 0xa8
 8002bac:	f001 fc10 	bl	80043d0 <pvPortMalloc>
 8002bb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bbe:	e005      	b.n	8002bcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f001 fcd3 	bl	800456c <vPortFree>
 8002bc6:	e001      	b.n	8002bcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d017      	beq.n	8002c02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9303      	str	r3, [sp, #12]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f80f 	bl	8002c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bf6:	69f8      	ldr	r0, [r7, #28]
 8002bf8:	f000 f8b4 	bl	8002d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e002      	b.n	8002c08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c08:	69bb      	ldr	r3, [r7, #24]
	}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	21a5      	movs	r1, #165	@ 0xa5
 8002c2e:	f001 fdbb 	bl	80047a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f023 0307 	bic.w	r3, r3, #7
 8002c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	617b      	str	r3, [r7, #20]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01f      	beq.n	8002cb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e012      	b.n	8002ca0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	7819      	ldrb	r1, [r3, #0]
 8002c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	3334      	adds	r3, #52	@ 0x34
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d9e9      	bls.n	8002c7a <prvInitialiseNewTask+0x66>
 8002ca6:	e000      	b.n	8002caa <prvInitialiseNewTask+0x96>
			{
				break;
 8002ca8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cb2:	e003      	b.n	8002cbc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	2b37      	cmp	r3, #55	@ 0x37
 8002cc0:	d901      	bls.n	8002cc6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cc2:	2337      	movs	r3, #55	@ 0x37
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff f96a 	bl	8001fb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	3318      	adds	r3, #24
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f965 	bl	8001fb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	3354      	adds	r3, #84	@ 0x54
 8002d16:	224c      	movs	r2, #76	@ 0x4c
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fd44 	bl	80047a8 <memset>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <prvInitialiseNewTask+0x144>)
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <prvInitialiseNewTask+0x148>)
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <prvInitialiseNewTask+0x14c>)
 8002d30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	69b8      	ldr	r0, [r7, #24]
 8002d38:	f001 f954 	bl	8003fe4 <pxPortInitialiseStack>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d4e:	bf00      	nop
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20001b04 	.word	0x20001b04
 8002d5c:	20001b6c 	.word	0x20001b6c
 8002d60:	20001bd4 	.word	0x20001bd4

08002d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d6c:	f001 fa2e 	bl	80041cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <prvAddNewTaskToReadyList+0xc4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <prvAddNewTaskToReadyList+0xc4>)
 8002d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <prvAddNewTaskToReadyList+0xc8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d82:	4a2a      	ldr	r2, [pc, #168]	@ (8002e2c <prvAddNewTaskToReadyList+0xc8>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d88:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <prvAddNewTaskToReadyList+0xc4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d110      	bne.n	8002db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d90:	f000 fc2a 	bl	80035e8 <prvInitialiseTaskLists>
 8002d94:	e00d      	b.n	8002db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d96:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <prvAddNewTaskToReadyList+0xcc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d9e:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <prvAddNewTaskToReadyList+0xc8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d802      	bhi.n	8002db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002dac:	4a1f      	ldr	r2, [pc, #124]	@ (8002e2c <prvAddNewTaskToReadyList+0xc8>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002db2:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <prvAddNewTaskToReadyList+0xd0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <prvAddNewTaskToReadyList+0xd0>)
 8002dba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e34 <prvAddNewTaskToReadyList+0xd0>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <prvAddNewTaskToReadyList+0xd4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d903      	bls.n	8002dd8 <prvAddNewTaskToReadyList+0x74>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <prvAddNewTaskToReadyList+0xd4>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4a15      	ldr	r2, [pc, #84]	@ (8002e3c <prvAddNewTaskToReadyList+0xd8>)
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f7ff f8ed 	bl	8001fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002df4:	f001 fa1a 	bl	800422c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002df8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <prvAddNewTaskToReadyList+0xcc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <prvAddNewTaskToReadyList+0xc8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d207      	bcs.n	8002e1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <prvAddNewTaskToReadyList+0xdc>)
 8002e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000d84 	.word	0x20000d84
 8002e2c:	200008b0 	.word	0x200008b0
 8002e30:	20000d90 	.word	0x20000d90
 8002e34:	20000da0 	.word	0x20000da0
 8002e38:	20000d8c 	.word	0x20000d8c
 8002e3c:	200008b4 	.word	0x200008b4
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <vTaskDelay+0x64>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <vTaskDelay+0x32>
	__asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	60bb      	str	r3, [r7, #8]
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e76:	f000 f88b 	bl	8002f90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fd05 	bl	800388c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e82:	f000 f893 	bl	8002fac <xTaskResumeAll>
 8002e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <vTaskDelay+0x68>)
 8002e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000dac 	.word	0x20000dac
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ebe:	463a      	mov	r2, r7
 8002ec0:	1d39      	adds	r1, r7, #4
 8002ec2:	f107 0308 	add.w	r3, r7, #8
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f824 	bl	8001f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	9202      	str	r2, [sp, #8]
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	460a      	mov	r2, r1
 8002ede:	4924      	ldr	r1, [pc, #144]	@ (8002f70 <vTaskStartScheduler+0xc0>)
 8002ee0:	4824      	ldr	r0, [pc, #144]	@ (8002f74 <vTaskStartScheduler+0xc4>)
 8002ee2:	f7ff fdf1 	bl	8002ac8 <xTaskCreateStatic>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4a23      	ldr	r2, [pc, #140]	@ (8002f78 <vTaskStartScheduler+0xc8>)
 8002eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <vTaskStartScheduler+0xc8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e001      	b.n	8002efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f04:	f000 fd16 	bl	8003934 <xTimerCreateTimerTask>
 8002f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d11b      	bne.n	8002f48 <vTaskStartScheduler+0x98>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	613b      	str	r3, [r7, #16]
}
 8002f22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f24:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <vTaskStartScheduler+0xcc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3354      	adds	r3, #84	@ 0x54
 8002f2a:	4a15      	ldr	r2, [pc, #84]	@ (8002f80 <vTaskStartScheduler+0xd0>)
 8002f2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <vTaskStartScheduler+0xd4>)
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f36:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <vTaskStartScheduler+0xd8>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <vTaskStartScheduler+0xdc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f42:	f001 f8d1 	bl	80040e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f46:	e00f      	b.n	8002f68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d10b      	bne.n	8002f68 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	60fb      	str	r3, [r7, #12]
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <vTaskStartScheduler+0xb4>
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	080049f0 	.word	0x080049f0
 8002f74:	080035b9 	.word	0x080035b9
 8002f78:	20000da8 	.word	0x20000da8
 8002f7c:	200008b0 	.word	0x200008b0
 8002f80:	20000010 	.word	0x20000010
 8002f84:	20000da4 	.word	0x20000da4
 8002f88:	20000d90 	.word	0x20000d90
 8002f8c:	20000d88 	.word	0x20000d88

08002f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f94:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <vTaskSuspendAll+0x18>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a03      	ldr	r2, [pc, #12]	@ (8002fa8 <vTaskSuspendAll+0x18>)
 8002f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000dac 	.word	0x20000dac

08002fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fba:	4b42      	ldr	r3, [pc, #264]	@ (80030c4 <xTaskResumeAll+0x118>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <xTaskResumeAll+0x2e>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	603b      	str	r3, [r7, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fda:	f001 f8f7 	bl	80041cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fde:	4b39      	ldr	r3, [pc, #228]	@ (80030c4 <xTaskResumeAll+0x118>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4a37      	ldr	r2, [pc, #220]	@ (80030c4 <xTaskResumeAll+0x118>)
 8002fe6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe8:	4b36      	ldr	r3, [pc, #216]	@ (80030c4 <xTaskResumeAll+0x118>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d162      	bne.n	80030b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ff0:	4b35      	ldr	r3, [pc, #212]	@ (80030c8 <xTaskResumeAll+0x11c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05e      	beq.n	80030b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff8:	e02f      	b.n	800305a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffa:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <xTaskResumeAll+0x120>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3318      	adds	r3, #24
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f83c 	bl	8002084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3304      	adds	r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f837 	bl	8002084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <xTaskResumeAll+0x124>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d903      	bls.n	800302a <xTaskResumeAll+0x7e>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	4a2a      	ldr	r2, [pc, #168]	@ (80030d0 <xTaskResumeAll+0x124>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <xTaskResumeAll+0x128>)
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7fe ffc4 	bl	8001fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <xTaskResumeAll+0x12c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003054:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <xTaskResumeAll+0x130>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800305a:	4b1c      	ldr	r3, [pc, #112]	@ (80030cc <xTaskResumeAll+0x120>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1cb      	bne.n	8002ffa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003068:	f000 fb62 	bl	8003730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800306c:	4b1c      	ldr	r3, [pc, #112]	@ (80030e0 <xTaskResumeAll+0x134>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d010      	beq.n	800309a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003078:	f000 f844 	bl	8003104 <xTaskIncrementTick>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <xTaskResumeAll+0x130>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f1      	bne.n	8003078 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003094:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <xTaskResumeAll+0x134>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <xTaskResumeAll+0x130>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030a6:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <xTaskResumeAll+0x138>)
 80030a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030b6:	f001 f8b9 	bl	800422c <vPortExitCritical>

	return xAlreadyYielded;
 80030ba:	68bb      	ldr	r3, [r7, #8]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000dac 	.word	0x20000dac
 80030c8:	20000d84 	.word	0x20000d84
 80030cc:	20000d44 	.word	0x20000d44
 80030d0:	20000d8c 	.word	0x20000d8c
 80030d4:	200008b4 	.word	0x200008b4
 80030d8:	200008b0 	.word	0x200008b0
 80030dc:	20000d98 	.word	0x20000d98
 80030e0:	20000d94 	.word	0x20000d94
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <xTaskGetTickCount+0x18>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030f4:	687b      	ldr	r3, [r7, #4]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	20000d88 	.word	0x20000d88

08003104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800310e:	4b4f      	ldr	r3, [pc, #316]	@ (800324c <xTaskIncrementTick+0x148>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8090 	bne.w	8003238 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003118:	4b4d      	ldr	r3, [pc, #308]	@ (8003250 <xTaskIncrementTick+0x14c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003120:	4a4b      	ldr	r2, [pc, #300]	@ (8003250 <xTaskIncrementTick+0x14c>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d121      	bne.n	8003170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800312c:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <xTaskIncrementTick+0x150>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	603b      	str	r3, [r7, #0]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xTaskIncrementTick+0x46>
 800314e:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <xTaskIncrementTick+0x150>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4b40      	ldr	r3, [pc, #256]	@ (8003258 <xTaskIncrementTick+0x154>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3e      	ldr	r2, [pc, #248]	@ (8003254 <xTaskIncrementTick+0x150>)
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <xTaskIncrementTick+0x154>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <xTaskIncrementTick+0x158>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	4a3c      	ldr	r2, [pc, #240]	@ (800325c <xTaskIncrementTick+0x158>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	f000 fae0 	bl	8003730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003170:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <xTaskIncrementTick+0x15c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d349      	bcc.n	800320e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <xTaskIncrementTick+0x150>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003184:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <xTaskIncrementTick+0x15c>)
 8003186:	f04f 32ff 	mov.w	r2, #4294967295
 800318a:	601a      	str	r2, [r3, #0]
					break;
 800318c:	e03f      	b.n	800320e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <xTaskIncrementTick+0x150>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d203      	bcs.n	80031ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003260 <xTaskIncrementTick+0x15c>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031ac:	e02f      	b.n	800320e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe ff66 	bl	8002084 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3318      	adds	r3, #24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe ff5d 	bl	8002084 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ce:	4b25      	ldr	r3, [pc, #148]	@ (8003264 <xTaskIncrementTick+0x160>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d903      	bls.n	80031de <xTaskIncrementTick+0xda>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <xTaskIncrementTick+0x160>)
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003268 <xTaskIncrementTick+0x164>)
 80031ec:	441a      	add	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fe feea 	bl	8001fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fe:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <xTaskIncrementTick+0x168>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d3b8      	bcc.n	800317a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003208:	2301      	movs	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320c:	e7b5      	b.n	800317a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800320e:	4b17      	ldr	r3, [pc, #92]	@ (800326c <xTaskIncrementTick+0x168>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003214:	4914      	ldr	r1, [pc, #80]	@ (8003268 <xTaskIncrementTick+0x164>)
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d901      	bls.n	800322a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003226:	2301      	movs	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <xTaskIncrementTick+0x16c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e004      	b.n	8003242 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003238:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <xTaskIncrementTick+0x170>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <xTaskIncrementTick+0x170>)
 8003240:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003242:	697b      	ldr	r3, [r7, #20]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000dac 	.word	0x20000dac
 8003250:	20000d88 	.word	0x20000d88
 8003254:	20000d3c 	.word	0x20000d3c
 8003258:	20000d40 	.word	0x20000d40
 800325c:	20000d9c 	.word	0x20000d9c
 8003260:	20000da4 	.word	0x20000da4
 8003264:	20000d8c 	.word	0x20000d8c
 8003268:	200008b4 	.word	0x200008b4
 800326c:	200008b0 	.word	0x200008b0
 8003270:	20000d98 	.word	0x20000d98
 8003274:	20000d94 	.word	0x20000d94

08003278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800327e:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <vTaskSwitchContext+0xb0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003286:	4b29      	ldr	r3, [pc, #164]	@ (800332c <vTaskSwitchContext+0xb4>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800328c:	e047      	b.n	800331e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800328e:	4b27      	ldr	r3, [pc, #156]	@ (800332c <vTaskSwitchContext+0xb4>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003294:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <vTaskSwitchContext+0xb8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e011      	b.n	80032c0 <vTaskSwitchContext+0x48>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <vTaskSwitchContext+0x42>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <vTaskSwitchContext+0x3e>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	491c      	ldr	r1, [pc, #112]	@ (8003334 <vTaskSwitchContext+0xbc>)
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0e3      	beq.n	800329c <vTaskSwitchContext+0x24>
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4a15      	ldr	r2, [pc, #84]	@ (8003334 <vTaskSwitchContext+0xbc>)
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3308      	adds	r3, #8
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d104      	bne.n	8003304 <vTaskSwitchContext+0x8c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4a0b      	ldr	r2, [pc, #44]	@ (8003338 <vTaskSwitchContext+0xc0>)
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4a08      	ldr	r2, [pc, #32]	@ (8003330 <vTaskSwitchContext+0xb8>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <vTaskSwitchContext+0xc0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3354      	adds	r3, #84	@ 0x54
 800331a:	4a08      	ldr	r2, [pc, #32]	@ (800333c <vTaskSwitchContext+0xc4>)
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000dac 	.word	0x20000dac
 800332c:	20000d98 	.word	0x20000d98
 8003330:	20000d8c 	.word	0x20000d8c
 8003334:	200008b4 	.word	0x200008b4
 8003338:	200008b0 	.word	0x200008b0
 800333c:	20000010 	.word	0x20000010

08003340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	60fb      	str	r3, [r7, #12]
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003368:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <vTaskPlaceOnEventList+0x48>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3318      	adds	r3, #24
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fe fe4f 	bl	8002014 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003376:	2101      	movs	r1, #1
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	f000 fa87 	bl	800388c <prvAddCurrentTaskToDelayedList>
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200008b0 	.word	0x200008b0

0800338c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	617b      	str	r3, [r7, #20]
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	e7fd      	b.n	80033b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4619      	mov	r1, r3
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7fe fe05 	bl	8001fce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	68b8      	ldr	r0, [r7, #8]
 80033d4:	f000 fa5a 	bl	800388c <prvAddCurrentTaskToDelayedList>
	}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200008b0 	.word	0x200008b0

080033e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	60fb      	str	r3, [r7, #12]
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	3318      	adds	r3, #24
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fe34 	bl	8002084 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341c:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <xTaskRemoveFromEventList+0xb0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11d      	bne.n	8003460 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	3304      	adds	r3, #4
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fe2b 	bl	8002084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003432:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <xTaskRemoveFromEventList+0xb4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d903      	bls.n	8003442 <xTaskRemoveFromEventList+0x5e>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <xTaskRemoveFromEventList+0xb4>)
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4a13      	ldr	r2, [pc, #76]	@ (800349c <xTaskRemoveFromEventList+0xb8>)
 8003450:	441a      	add	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3304      	adds	r3, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe fdb8 	bl	8001fce <vListInsertEnd>
 800345e:	e005      	b.n	800346c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3318      	adds	r3, #24
 8003464:	4619      	mov	r1, r3
 8003466:	480e      	ldr	r0, [pc, #56]	@ (80034a0 <xTaskRemoveFromEventList+0xbc>)
 8003468:	f7fe fdb1 	bl	8001fce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <xTaskRemoveFromEventList+0xc0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	429a      	cmp	r2, r3
 8003478:	d905      	bls.n	8003486 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <xTaskRemoveFromEventList+0xc4>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e001      	b.n	800348a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800348a:	697b      	ldr	r3, [r7, #20]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000dac 	.word	0x20000dac
 8003498:	20000d8c 	.word	0x20000d8c
 800349c:	200008b4 	.word	0x200008b4
 80034a0:	20000d44 	.word	0x20000d44
 80034a4:	200008b0 	.word	0x200008b0
 80034a8:	20000d98 	.word	0x20000d98

080034ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <vTaskInternalSetTimeOutState+0x24>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <vTaskInternalSetTimeOutState+0x28>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	605a      	str	r2, [r3, #4]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000d9c 	.word	0x20000d9c
 80034d4:	20000d88 	.word	0x20000d88

080034d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	613b      	str	r3, [r7, #16]
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60fb      	str	r3, [r7, #12]
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	e7fd      	b.n	800351a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800351e:	f000 fe55 	bl	80041cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003522:	4b1d      	ldr	r3, [pc, #116]	@ (8003598 <xTaskCheckForTimeOut+0xc0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d102      	bne.n	8003542 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	e023      	b.n	800358a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b15      	ldr	r3, [pc, #84]	@ (800359c <xTaskCheckForTimeOut+0xc4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d007      	beq.n	800355e <xTaskCheckForTimeOut+0x86>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e015      	b.n	800358a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	429a      	cmp	r2, r3
 8003566:	d20b      	bcs.n	8003580 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1ad2      	subs	r2, r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff99 	bl	80034ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e004      	b.n	800358a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800358a:	f000 fe4f 	bl	800422c <vPortExitCritical>

	return xReturn;
 800358e:	69fb      	ldr	r3, [r7, #28]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000d88 	.word	0x20000d88
 800359c:	20000d9c 	.word	0x20000d9c

080035a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <vTaskMissedYield+0x14>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	bf00      	nop
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000d98 	.word	0x20000d98

080035b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035c0:	f000 f852 	bl	8003668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <prvIdleTask+0x28>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d9f9      	bls.n	80035c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <prvIdleTask+0x2c>)
 80035ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035dc:	e7f0      	b.n	80035c0 <prvIdleTask+0x8>
 80035de:	bf00      	nop
 80035e0:	200008b4 	.word	0x200008b4
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	e00c      	b.n	800360e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a12      	ldr	r2, [pc, #72]	@ (8003648 <prvInitialiseTaskLists+0x60>)
 8003600:	4413      	add	r3, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fcb8 	bl	8001f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b37      	cmp	r3, #55	@ 0x37
 8003612:	d9ef      	bls.n	80035f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003614:	480d      	ldr	r0, [pc, #52]	@ (800364c <prvInitialiseTaskLists+0x64>)
 8003616:	f7fe fcaf 	bl	8001f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800361a:	480d      	ldr	r0, [pc, #52]	@ (8003650 <prvInitialiseTaskLists+0x68>)
 800361c:	f7fe fcac 	bl	8001f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003620:	480c      	ldr	r0, [pc, #48]	@ (8003654 <prvInitialiseTaskLists+0x6c>)
 8003622:	f7fe fca9 	bl	8001f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003626:	480c      	ldr	r0, [pc, #48]	@ (8003658 <prvInitialiseTaskLists+0x70>)
 8003628:	f7fe fca6 	bl	8001f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800362c:	480b      	ldr	r0, [pc, #44]	@ (800365c <prvInitialiseTaskLists+0x74>)
 800362e:	f7fe fca3 	bl	8001f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003632:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <prvInitialiseTaskLists+0x78>)
 8003634:	4a05      	ldr	r2, [pc, #20]	@ (800364c <prvInitialiseTaskLists+0x64>)
 8003636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <prvInitialiseTaskLists+0x7c>)
 800363a:	4a05      	ldr	r2, [pc, #20]	@ (8003650 <prvInitialiseTaskLists+0x68>)
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200008b4 	.word	0x200008b4
 800364c:	20000d14 	.word	0x20000d14
 8003650:	20000d28 	.word	0x20000d28
 8003654:	20000d44 	.word	0x20000d44
 8003658:	20000d58 	.word	0x20000d58
 800365c:	20000d70 	.word	0x20000d70
 8003660:	20000d3c 	.word	0x20000d3c
 8003664:	20000d40 	.word	0x20000d40

08003668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800366e:	e019      	b.n	80036a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003670:	f000 fdac 	bl	80041cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003674:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <prvCheckTasksWaitingTermination+0x50>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fcff 	bl	8002084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <prvCheckTasksWaitingTermination+0x54>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3b01      	subs	r3, #1
 800368c:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <prvCheckTasksWaitingTermination+0x54>)
 800368e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <prvCheckTasksWaitingTermination+0x58>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3b01      	subs	r3, #1
 8003696:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <prvCheckTasksWaitingTermination+0x58>)
 8003698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800369a:	f000 fdc7 	bl	800422c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f810 	bl	80036c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a4:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <prvCheckTasksWaitingTermination+0x58>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e1      	bne.n	8003670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000d58 	.word	0x20000d58
 80036bc:	20000d84 	.word	0x20000d84
 80036c0:	20000d6c 	.word	0x20000d6c

080036c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3354      	adds	r3, #84	@ 0x54
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f871 	bl	80047b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d108      	bne.n	80036f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 ff41 	bl	800456c <vPortFree>
				vPortFree( pxTCB );
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 ff3e 	bl	800456c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036f0:	e019      	b.n	8003726 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d103      	bne.n	8003704 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 ff35 	bl	800456c <vPortFree>
	}
 8003702:	e010      	b.n	8003726 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800370a:	2b02      	cmp	r3, #2
 800370c:	d00b      	beq.n	8003726 <prvDeleteTCB+0x62>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	60fb      	str	r3, [r7, #12]
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <prvDeleteTCB+0x5e>
	}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <prvResetNextTaskUnblockTime+0x38>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <prvResetNextTaskUnblockTime+0x3c>)
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003748:	e008      	b.n	800375c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <prvResetNextTaskUnblockTime+0x38>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a04      	ldr	r2, [pc, #16]	@ (800376c <prvResetNextTaskUnblockTime+0x3c>)
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000d3c 	.word	0x20000d3c
 800376c:	20000da4 	.word	0x20000da4

08003770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <xTaskGetSchedulerState+0x34>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800377e:	2301      	movs	r3, #1
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	e008      	b.n	8003796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <xTaskGetSchedulerState+0x38>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800378c:	2302      	movs	r3, #2
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	e001      	b.n	8003796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003796:	687b      	ldr	r3, [r7, #4]
	}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000d90 	.word	0x20000d90
 80037a8:	20000dac 	.word	0x20000dac

080037ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d058      	beq.n	8003874 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <xTaskPriorityDisinherit+0xd4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d00b      	beq.n	80037e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	60fb      	str	r3, [r7, #12]
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	60bb      	str	r3, [r7, #8]
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	429a      	cmp	r2, r3
 8003818:	d02c      	beq.n	8003874 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d128      	bne.n	8003874 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fc2c 	bl	8002084 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003844:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <xTaskPriorityDisinherit+0xd8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d903      	bls.n	8003854 <xTaskPriorityDisinherit+0xa8>
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	4a0c      	ldr	r2, [pc, #48]	@ (8003884 <xTaskPriorityDisinherit+0xd8>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <xTaskPriorityDisinherit+0xdc>)
 8003862:	441a      	add	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	3304      	adds	r3, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fe fbaf 	bl	8001fce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003874:	697b      	ldr	r3, [r7, #20]
	}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200008b0 	.word	0x200008b0
 8003884:	20000d8c 	.word	0x20000d8c
 8003888:	200008b4 	.word	0x200008b4

0800388c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003896:	4b21      	ldr	r3, [pc, #132]	@ (800391c <prvAddCurrentTaskToDelayedList+0x90>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <prvAddCurrentTaskToDelayedList+0x94>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fbee 	bl	8002084 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d10a      	bne.n	80038c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003920 <prvAddCurrentTaskToDelayedList+0x94>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4819      	ldr	r0, [pc, #100]	@ (8003924 <prvAddCurrentTaskToDelayedList+0x98>)
 80038c0:	f7fe fb85 	bl	8001fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038c4:	e026      	b.n	8003914 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038ce:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <prvAddCurrentTaskToDelayedList+0x94>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d209      	bcs.n	80038f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038de:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f7fe fb92 	bl	8002014 <vListInsert>
}
 80038f0:	e010      	b.n	8003914 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f2:	4b0e      	ldr	r3, [pc, #56]	@ (800392c <prvAddCurrentTaskToDelayedList+0xa0>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <prvAddCurrentTaskToDelayedList+0x94>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f7fe fb88 	bl	8002014 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d202      	bcs.n	8003914 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800390e:	4a08      	ldr	r2, [pc, #32]	@ (8003930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000d88 	.word	0x20000d88
 8003920:	200008b0 	.word	0x200008b0
 8003924:	20000d70 	.word	0x20000d70
 8003928:	20000d40 	.word	0x20000d40
 800392c:	20000d3c 	.word	0x20000d3c
 8003930:	20000da4 	.word	0x20000da4

08003934 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800393e:	f000 fb11 	bl	8003f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003942:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <xTimerCreateTimerTask+0x84>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d021      	beq.n	800398e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003952:	1d3a      	adds	r2, r7, #4
 8003954:	f107 0108 	add.w	r1, r7, #8
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe faf1 	bl	8001f44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	9202      	str	r2, [sp, #8]
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	2302      	movs	r3, #2
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	460a      	mov	r2, r1
 8003974:	4911      	ldr	r1, [pc, #68]	@ (80039bc <xTimerCreateTimerTask+0x88>)
 8003976:	4812      	ldr	r0, [pc, #72]	@ (80039c0 <xTimerCreateTimerTask+0x8c>)
 8003978:	f7ff f8a6 	bl	8002ac8 <xTaskCreateStatic>
 800397c:	4603      	mov	r3, r0
 800397e:	4a11      	ldr	r2, [pc, #68]	@ (80039c4 <xTimerCreateTimerTask+0x90>)
 8003980:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003982:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <xTimerCreateTimerTask+0x90>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800398a:	2301      	movs	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	613b      	str	r3, [r7, #16]
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039ac:	697b      	ldr	r3, [r7, #20]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000de0 	.word	0x20000de0
 80039bc:	080049f8 	.word	0x080049f8
 80039c0:	08003b01 	.word	0x08003b01
 80039c4:	20000de4 	.word	0x20000de4

080039c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	@ 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	623b      	str	r3, [r7, #32]
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <xTimerGenericCommand+0x98>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d02a      	beq.n	8003a56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	dc18      	bgt.n	8003a44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a12:	f7ff fead 	bl	8003770 <xTaskGetSchedulerState>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d109      	bne.n	8003a30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a1c:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <xTimerGenericCommand+0x98>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	f107 0110 	add.w	r1, r7, #16
 8003a24:	2300      	movs	r3, #0
 8003a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a28:	f7fe fc60 	bl	80022ec <xQueueGenericSend>
 8003a2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a2e:	e012      	b.n	8003a56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <xTimerGenericCommand+0x98>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	f107 0110 	add.w	r1, r7, #16
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f7fe fc56 	bl	80022ec <xQueueGenericSend>
 8003a40:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a42:	e008      	b.n	8003a56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <xTimerGenericCommand+0x98>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f107 0110 	add.w	r1, r7, #16
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	f7fe fd4e 	bl	80024f0 <xQueueGenericSendFromISR>
 8003a54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000de0 	.word	0x20000de0

08003a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a6e:	4b23      	ldr	r3, [pc, #140]	@ (8003afc <prvProcessExpiredTimer+0x98>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fb01 	bl	8002084 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d023      	beq.n	8003ad8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	18d1      	adds	r1, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f000 f8d3 	bl	8003c48 <prvInsertTimerInActiveList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff88 	bl	80039c8 <xTimerGenericCommand>
 8003ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d114      	bne.n	8003aea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	4798      	blx	r3
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000dd8 	.word	0x20000dd8

08003b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f859 	bl	8003bc4 <prvGetNextExpireTime>
 8003b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f805 	bl	8003b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b1e:	f000 f8d5 	bl	8003ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b22:	bf00      	nop
 8003b24:	e7f0      	b.n	8003b08 <prvTimerTask+0x8>
	...

08003b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b32:	f7ff fa2d 	bl	8002f90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f864 	bl	8003c08 <prvSampleTimeNow>
 8003b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d130      	bne.n	8003baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <prvProcessTimerOrBlockTask+0x3c>
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d806      	bhi.n	8003b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b56:	f7ff fa29 	bl	8002fac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b5a:	68f9      	ldr	r1, [r7, #12]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff81 	bl	8003a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b62:	e024      	b.n	8003bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b6a:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <prvProcessTimerOrBlockTask+0x90>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <prvProcessTimerOrBlockTask+0x50>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <prvProcessTimerOrBlockTask+0x52>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <prvProcessTimerOrBlockTask+0x94>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f7fe ff69 	bl	8002a60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b8e:	f7ff fa0d 	bl	8002fac <xTaskResumeAll>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b98:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <prvProcessTimerOrBlockTask+0x98>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
}
 8003ba8:	e001      	b.n	8003bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003baa:	f7ff f9ff 	bl	8002fac <xTaskResumeAll>
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000ddc 	.word	0x20000ddc
 8003bbc:	20000de0 	.word	0x20000de0
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <prvGetNextExpireTime+0x40>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <prvGetNextExpireTime+0x16>
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	e000      	b.n	8003bdc <prvGetNextExpireTime+0x18>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <prvGetNextExpireTime+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e001      	b.n	8003bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	20000dd8 	.word	0x20000dd8

08003c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c10:	f7ff fa6a 	bl	80030e8 <xTaskGetTickCount>
 8003c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <prvSampleTimeNow+0x3c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d205      	bcs.n	8003c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c20:	f000 f93a 	bl	8003e98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e002      	b.n	8003c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c32:	4a04      	ldr	r2, [pc, #16]	@ (8003c44 <prvSampleTimeNow+0x3c>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c38:	68fb      	ldr	r3, [r7, #12]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000de8 	.word	0x20000de8

08003c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d812      	bhi.n	8003c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	1ad2      	subs	r2, r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e01b      	b.n	8003cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c82:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <prvInsertTimerInActiveList+0x7c>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7fe f9c1 	bl	8002014 <vListInsert>
 8003c92:	e012      	b.n	8003cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d206      	bcs.n	8003caa <prvInsertTimerInActiveList+0x62>
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e007      	b.n	8003cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003caa:	4b07      	ldr	r3, [pc, #28]	@ (8003cc8 <prvInsertTimerInActiveList+0x80>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7fe f9ad 	bl	8002014 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cba:	697b      	ldr	r3, [r7, #20]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000ddc 	.word	0x20000ddc
 8003cc8:	20000dd8 	.word	0x20000dd8

08003ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	@ 0x38
 8003cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cd2:	e0ce      	b.n	8003e72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da19      	bge.n	8003d0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	3304      	adds	r3, #4
 8003cde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	61fb      	str	r3, [r7, #28]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d04:	6850      	ldr	r0, [r2, #4]
 8003d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f2c0 80ae 	blt.w	8003e72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe f9ac 	bl	8002084 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff6a 	bl	8003c08 <prvSampleTimeNow>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	f200 8097 	bhi.w	8003e6c <prvProcessReceivedCommands+0x1a0>
 8003d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d44 <prvProcessReceivedCommands+0x78>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d6d 	.word	0x08003d6d
 8003d50:	08003de3 	.word	0x08003de3
 8003d54:	08003df7 	.word	0x08003df7
 8003d58:	08003e43 	.word	0x08003e43
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d6d 	.word	0x08003d6d
 8003d64:	08003de3 	.word	0x08003de3
 8003d68:	08003df7 	.word	0x08003df7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	18d1      	adds	r1, r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d8c:	f7ff ff5c 	bl	8003c48 <prvInsertTimerInActiveList>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d06c      	beq.n	8003e70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d061      	beq.n	8003e70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	441a      	add	r2, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dbe:	f7ff fe03 	bl	80039c8 <xTimerGenericCommand>
 8003dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d152      	bne.n	8003e70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61bb      	str	r3, [r7, #24]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003df4:	e03d      	b.n	8003e72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	18d1      	adds	r1, r2, r3
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e3c:	f7ff ff04 	bl	8003c48 <prvInsertTimerInActiveList>
					break;
 8003e40:	e017      	b.n	8003e72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e52:	f000 fb8b 	bl	800456c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e56:	e00c      	b.n	8003e72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e6a:	e002      	b.n	8003e72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <prvProcessReceivedCommands+0x1a6>
					break;
 8003e70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e72:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <prvProcessReceivedCommands+0x1c8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	1d39      	adds	r1, r7, #4
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fbd6 	bl	800262c <xQueueReceive>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f47f af26 	bne.w	8003cd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3730      	adds	r7, #48	@ 0x30
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000de0 	.word	0x20000de0

08003e98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e9e:	e049      	b.n	8003f34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe f8e3 	bl	8002084 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02f      	beq.n	8003f34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90e      	bls.n	8003f04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f7fe f889 	bl	8002014 <vListInsert>
 8003f02:	e017      	b.n	8003f34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fd5a 	bl	80039c8 <xTimerGenericCommand>
 8003f14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	603b      	str	r3, [r7, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1b0      	bne.n	8003ea0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <prvSwitchTimerLists+0xc8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003f4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f4c:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <prvSwitchTimerLists+0xc8>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000dd8 	.word	0x20000dd8
 8003f60:	20000ddc 	.word	0x20000ddc

08003f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f6a:	f000 f92f 	bl	80041cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d120      	bne.n	8003fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f76:	4814      	ldr	r0, [pc, #80]	@ (8003fc8 <prvCheckForValidListAndQueue+0x64>)
 8003f78:	f7fd fffe 	bl	8001f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f7c:	4813      	ldr	r0, [pc, #76]	@ (8003fcc <prvCheckForValidListAndQueue+0x68>)
 8003f7e:	f7fd fffb 	bl	8001f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f82:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <prvCheckForValidListAndQueue+0x6c>)
 8003f84:	4a10      	ldr	r2, [pc, #64]	@ (8003fc8 <prvCheckForValidListAndQueue+0x64>)
 8003f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f88:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <prvCheckForValidListAndQueue+0x70>)
 8003f8a:	4a10      	ldr	r2, [pc, #64]	@ (8003fcc <prvCheckForValidListAndQueue+0x68>)
 8003f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4b11      	ldr	r3, [pc, #68]	@ (8003fd8 <prvCheckForValidListAndQueue+0x74>)
 8003f94:	4a11      	ldr	r2, [pc, #68]	@ (8003fdc <prvCheckForValidListAndQueue+0x78>)
 8003f96:	2110      	movs	r1, #16
 8003f98:	200a      	movs	r0, #10
 8003f9a:	f7fe f907 	bl	80021ac <xQueueGenericCreateStatic>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a08      	ldr	r2, [pc, #32]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	490b      	ldr	r1, [pc, #44]	@ (8003fe0 <prvCheckForValidListAndQueue+0x7c>)
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fd2c 	bl	8002a10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fb8:	f000 f938 	bl	800422c <vPortExitCritical>
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000de0 	.word	0x20000de0
 8003fc8:	20000db0 	.word	0x20000db0
 8003fcc:	20000dc4 	.word	0x20000dc4
 8003fd0:	20000dd8 	.word	0x20000dd8
 8003fd4:	20000ddc 	.word	0x20000ddc
 8003fd8:	20000e8c 	.word	0x20000e8c
 8003fdc:	20000dec 	.word	0x20000dec
 8003fe0:	08004a00 	.word	0x08004a00

08003fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b04      	subs	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b04      	subs	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004014:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <pxPortInitialiseStack+0x54>)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b14      	subs	r3, #20
 800401e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b20      	subs	r3, #32
 800402a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800402c:	68fb      	ldr	r3, [r7, #12]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	0800403d 	.word	0x0800403d

0800403c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <prvTaskExitError+0x54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d00b      	beq.n	8004068 <prvTaskExitError+0x2c>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60fb      	str	r3, [r7, #12]
}
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	e7fd      	b.n	8004064 <prvTaskExitError+0x28>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60bb      	str	r3, [r7, #8]
}
 800407a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800407c:	bf00      	nop
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0fc      	beq.n	800407e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	2000000c 	.word	0x2000000c
	...

080040a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040a0:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <pxCurrentTCBConst2>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040aa:	f380 8809 	msr	PSP, r0
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80040be:	4770      	bx	lr

080040c0 <pxCurrentTCBConst2>:
 80040c0:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80040c8:	4806      	ldr	r0, [pc, #24]	@ (80040e4 <prvPortStartFirstTask+0x1c>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	f380 8808 	msr	MSP, r0
 80040d2:	b662      	cpsie	i
 80040d4:	b661      	cpsie	f
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	df00      	svc	0
 80040e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040e2:	bf00      	nop
 80040e4:	e000ed08 	.word	0xe000ed08

080040e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ee:	4b32      	ldr	r3, [pc, #200]	@ (80041b8 <xPortStartScheduler+0xd0>)
 80040f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	@ 0xff
 80040fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b2a      	ldr	r3, [pc, #168]	@ (80041bc <xPortStartScheduler+0xd4>)
 8004114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004116:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <xPortStartScheduler+0xd8>)
 8004118:	2207      	movs	r2, #7
 800411a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800411c:	e009      	b.n	8004132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800411e:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <xPortStartScheduler+0xd8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3b01      	subs	r3, #1
 8004124:	4a26      	ldr	r2, [pc, #152]	@ (80041c0 <xPortStartScheduler+0xd8>)
 8004126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413a:	2b80      	cmp	r3, #128	@ 0x80
 800413c:	d0ef      	beq.n	800411e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <xPortStartScheduler+0xd8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1c3 0307 	rsb	r3, r3, #7
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00b      	beq.n	8004162 <xPortStartScheduler+0x7a>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60bb      	str	r3, [r7, #8]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004162:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <xPortStartScheduler+0xd8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	4a15      	ldr	r2, [pc, #84]	@ (80041c0 <xPortStartScheduler+0xd8>)
 800416a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800416c:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <xPortStartScheduler+0xd8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004174:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <xPortStartScheduler+0xd8>)
 8004176:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004180:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <xPortStartScheduler+0xdc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0f      	ldr	r2, [pc, #60]	@ (80041c4 <xPortStartScheduler+0xdc>)
 8004186:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800418a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800418c:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <xPortStartScheduler+0xdc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0c      	ldr	r2, [pc, #48]	@ (80041c4 <xPortStartScheduler+0xdc>)
 8004192:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004196:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004198:	f000 f8b8 	bl	800430c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <xPortStartScheduler+0xe0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041a2:	f7ff ff91 	bl	80040c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041a6:	f7ff f867 	bl	8003278 <vTaskSwitchContext>
	prvTaskExitError();
 80041aa:	f7ff ff47 	bl	800403c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	e000e400 	.word	0xe000e400
 80041bc:	20000edc 	.word	0x20000edc
 80041c0:	20000ee0 	.word	0x20000ee0
 80041c4:	e000ed20 	.word	0xe000ed20
 80041c8:	2000000c 	.word	0x2000000c

080041cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	607b      	str	r3, [r7, #4]
}
 80041e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <vPortEnterCritical+0x58>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004224 <vPortEnterCritical+0x58>)
 80041ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <vPortEnterCritical+0x58>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d110      	bne.n	800421a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <vPortEnterCritical+0x5c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <vPortEnterCritical+0x4e>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	603b      	str	r3, [r7, #0]
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	e7fd      	b.n	8004216 <vPortEnterCritical+0x4a>
	}
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	2000000c 	.word	0x2000000c
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <vPortExitCritical+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <vPortExitCritical+0x26>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	607b      	str	r3, [r7, #4]
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004252:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a08      	ldr	r2, [pc, #32]	@ (800427c <vPortExitCritical+0x50>)
 800425a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800425c:	4b07      	ldr	r3, [pc, #28]	@ (800427c <vPortExitCritical+0x50>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <vPortExitCritical+0x44>
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f383 8811 	msr	BASEPRI, r3
}
 800426e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	2000000c 	.word	0x2000000c

08004280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004280:	f3ef 8009 	mrs	r0, PSP
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <pxCurrentTCBConst>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004290:	6010      	str	r0, [r2, #0]
 8004292:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004296:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800429a:	f380 8811 	msr	BASEPRI, r0
 800429e:	f7fe ffeb 	bl	8003278 <vTaskSwitchContext>
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8811 	msr	BASEPRI, r0
 80042aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	6808      	ldr	r0, [r1, #0]
 80042b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042b6:	f380 8809 	msr	PSP, r0
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	4770      	bx	lr

080042c0 <pxCurrentTCBConst>:
 80042c0:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042e2:	f7fe ff0f 	bl	8003104 <xTaskIncrementTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <xPortSysTickHandler+0x40>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
}
 80042fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <vPortSetupTimerInterrupt+0x30>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004316:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <vPortSetupTimerInterrupt+0x38>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a09      	ldr	r2, [pc, #36]	@ (8004348 <vPortSetupTimerInterrupt+0x3c>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	4a08      	ldr	r2, [pc, #32]	@ (800434c <vPortSetupTimerInterrupt+0x40>)
 800432a:	3b01      	subs	r3, #1
 800432c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800432e:	4b03      	ldr	r3, [pc, #12]	@ (800433c <vPortSetupTimerInterrupt+0x30>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	e000e010 	.word	0xe000e010
 8004340:	e000e018 	.word	0xe000e018
 8004344:	20000000 	.word	0x20000000
 8004348:	10624dd3 	.word	0x10624dd3
 800434c:	e000e014 	.word	0xe000e014

08004350 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004356:	f3ef 8305 	mrs	r3, IPSR
 800435a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	d915      	bls.n	800438e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004362:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <vPortValidateInterruptPriority+0x70>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800436c:	4b15      	ldr	r3, [pc, #84]	@ (80043c4 <vPortValidateInterruptPriority+0x74>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	7afa      	ldrb	r2, [r7, #11]
 8004372:	429a      	cmp	r2, r3
 8004374:	d20b      	bcs.n	800438e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800438e:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <vPortValidateInterruptPriority+0x78>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <vPortValidateInterruptPriority+0x7c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90b      	bls.n	80043b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	603b      	str	r3, [r7, #0]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <vPortValidateInterruptPriority+0x62>
	}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	e000e3f0 	.word	0xe000e3f0
 80043c4:	20000edc 	.word	0x20000edc
 80043c8:	e000ed0c 	.word	0xe000ed0c
 80043cc:	20000ee0 	.word	0x20000ee0

080043d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	@ 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043dc:	f7fe fdd8 	bl	8002f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004554 <pvPortMalloc+0x184>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043e8:	f000 f924 	bl	8004634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004558 <pvPortMalloc+0x188>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 8095 	bne.w	8004524 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01e      	beq.n	800443e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004400:	2208      	movs	r2, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	2b00      	cmp	r3, #0
 8004410:	d015      	beq.n	800443e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f023 0307 	bic.w	r3, r3, #7
 8004418:	3308      	adds	r3, #8
 800441a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <pvPortMalloc+0x6e>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	617b      	str	r3, [r7, #20]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d06f      	beq.n	8004524 <pvPortMalloc+0x154>
 8004444:	4b45      	ldr	r3, [pc, #276]	@ (800455c <pvPortMalloc+0x18c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d86a      	bhi.n	8004524 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800444e:	4b44      	ldr	r3, [pc, #272]	@ (8004560 <pvPortMalloc+0x190>)
 8004450:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004452:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <pvPortMalloc+0x190>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004458:	e004      	b.n	8004464 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d903      	bls.n	8004476 <pvPortMalloc+0xa6>
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f1      	bne.n	800445a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004476:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <pvPortMalloc+0x184>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447c:	429a      	cmp	r2, r3
 800447e:	d051      	beq.n	8004524 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	4413      	add	r3, r2
 8004488:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	1ad2      	subs	r2, r2, r3
 800449a:	2308      	movs	r3, #8
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	429a      	cmp	r2, r3
 80044a0:	d920      	bls.n	80044e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <pvPortMalloc+0xfc>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044de:	69b8      	ldr	r0, [r7, #24]
 80044e0:	f000 f90a 	bl	80046f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <pvPortMalloc+0x18c>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	4a1b      	ldr	r2, [pc, #108]	@ (800455c <pvPortMalloc+0x18c>)
 80044f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044f2:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <pvPortMalloc+0x18c>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <pvPortMalloc+0x194>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d203      	bcs.n	8004506 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044fe:	4b17      	ldr	r3, [pc, #92]	@ (800455c <pvPortMalloc+0x18c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <pvPortMalloc+0x194>)
 8004504:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <pvPortMalloc+0x188>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	431a      	orrs	r2, r3
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800451a:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <pvPortMalloc+0x198>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	4a11      	ldr	r2, [pc, #68]	@ (8004568 <pvPortMalloc+0x198>)
 8004522:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004524:	f7fe fd42 	bl	8002fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <pvPortMalloc+0x17a>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60fb      	str	r3, [r7, #12]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <pvPortMalloc+0x176>
	return pvReturn;
 800454a:	69fb      	ldr	r3, [r7, #28]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	@ 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20001aec 	.word	0x20001aec
 8004558:	20001b00 	.word	0x20001b00
 800455c:	20001af0 	.word	0x20001af0
 8004560:	20001ae4 	.word	0x20001ae4
 8004564:	20001af4 	.word	0x20001af4
 8004568:	20001af8 	.word	0x20001af8

0800456c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04f      	beq.n	800461e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800457e:	2308      	movs	r3, #8
 8004580:	425b      	negs	r3, r3
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4413      	add	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <vPortFree+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <vPortFree+0x46>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	60fb      	str	r3, [r7, #12]
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	e7fd      	b.n	80045ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <vPortFree+0x66>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60bb      	str	r3, [r7, #8]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b14      	ldr	r3, [pc, #80]	@ (8004628 <vPortFree+0xbc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01e      	beq.n	800461e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11a      	bne.n	800461e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004628 <vPortFree+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045f8:	f7fe fcca 	bl	8002f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <vPortFree+0xc0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4413      	add	r3, r2
 8004606:	4a09      	ldr	r2, [pc, #36]	@ (800462c <vPortFree+0xc0>)
 8004608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460a:	6938      	ldr	r0, [r7, #16]
 800460c:	f000 f874 	bl	80046f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004610:	4b07      	ldr	r3, [pc, #28]	@ (8004630 <vPortFree+0xc4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a06      	ldr	r2, [pc, #24]	@ (8004630 <vPortFree+0xc4>)
 8004618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800461a:	f7fe fcc7 	bl	8002fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20001b00 	.word	0x20001b00
 800462c:	20001af0 	.word	0x20001af0
 8004630:	20001afc 	.word	0x20001afc

08004634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800463a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800463e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004640:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <prvHeapInit+0xac>)
 8004642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3307      	adds	r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <prvHeapInit+0xac>)
 8004664:	4413      	add	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <prvHeapInit+0xb0>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004672:	4b1c      	ldr	r3, [pc, #112]	@ (80046e4 <prvHeapInit+0xb0>)
 8004674:	2200      	movs	r2, #0
 8004676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4413      	add	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004680:	2208      	movs	r2, #8
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a15      	ldr	r2, [pc, #84]	@ (80046e8 <prvHeapInit+0xb4>)
 8004694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004696:	4b14      	ldr	r3, [pc, #80]	@ (80046e8 <prvHeapInit+0xb4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <prvHeapInit+0xb4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <prvHeapInit+0xb4>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a0a      	ldr	r2, [pc, #40]	@ (80046ec <prvHeapInit+0xb8>)
 80046c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a09      	ldr	r2, [pc, #36]	@ (80046f0 <prvHeapInit+0xbc>)
 80046ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <prvHeapInit+0xc0>)
 80046ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046d2:	601a      	str	r2, [r3, #0]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000ee4 	.word	0x20000ee4
 80046e4:	20001ae4 	.word	0x20001ae4
 80046e8:	20001aec 	.word	0x20001aec
 80046ec:	20001af4 	.word	0x20001af4
 80046f0:	20001af0 	.word	0x20001af0
 80046f4:	20001b00 	.word	0x20001b00

080046f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004700:	4b27      	ldr	r3, [pc, #156]	@ (80047a0 <prvInsertBlockIntoFreeList+0xa8>)
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e002      	b.n	800470c <prvInsertBlockIntoFreeList+0x14>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d8f7      	bhi.n	8004706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	4413      	add	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d108      	bne.n	800473a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d118      	bne.n	8004780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <prvInsertBlockIntoFreeList+0xac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d00d      	beq.n	8004776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e008      	b.n	8004788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <prvInsertBlockIntoFreeList+0xac>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e003      	b.n	8004788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d002      	beq.n	8004796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	20001ae4 	.word	0x20001ae4
 80047a4:	20001aec 	.word	0x20001aec

080047a8 <memset>:
 80047a8:	4603      	mov	r3, r0
 80047aa:	4402      	add	r2, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	f803 1b01 	strb.w	r1, [r3], #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <_reclaim_reent>:
 80047b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004870 <_reclaim_reent+0xb8>)
 80047ba:	b570      	push	{r4, r5, r6, lr}
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4604      	mov	r4, r0
 80047c0:	4283      	cmp	r3, r0
 80047c2:	d053      	beq.n	800486c <_reclaim_reent+0xb4>
 80047c4:	69c3      	ldr	r3, [r0, #28]
 80047c6:	b31b      	cbz	r3, 8004810 <_reclaim_reent+0x58>
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	b163      	cbz	r3, 80047e6 <_reclaim_reent+0x2e>
 80047cc:	2500      	movs	r5, #0
 80047ce:	69e3      	ldr	r3, [r4, #28]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	5959      	ldr	r1, [r3, r5]
 80047d4:	b9b1      	cbnz	r1, 8004804 <_reclaim_reent+0x4c>
 80047d6:	3504      	adds	r5, #4
 80047d8:	2d80      	cmp	r5, #128	@ 0x80
 80047da:	d1f8      	bne.n	80047ce <_reclaim_reent+0x16>
 80047dc:	69e3      	ldr	r3, [r4, #28]
 80047de:	4620      	mov	r0, r4
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	f000 f87b 	bl	80048dc <_free_r>
 80047e6:	69e3      	ldr	r3, [r4, #28]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	b111      	cbz	r1, 80047f2 <_reclaim_reent+0x3a>
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 f875 	bl	80048dc <_free_r>
 80047f2:	69e3      	ldr	r3, [r4, #28]
 80047f4:	689d      	ldr	r5, [r3, #8]
 80047f6:	b15d      	cbz	r5, 8004810 <_reclaim_reent+0x58>
 80047f8:	4629      	mov	r1, r5
 80047fa:	4620      	mov	r0, r4
 80047fc:	682d      	ldr	r5, [r5, #0]
 80047fe:	f000 f86d 	bl	80048dc <_free_r>
 8004802:	e7f8      	b.n	80047f6 <_reclaim_reent+0x3e>
 8004804:	680e      	ldr	r6, [r1, #0]
 8004806:	4620      	mov	r0, r4
 8004808:	f000 f868 	bl	80048dc <_free_r>
 800480c:	4631      	mov	r1, r6
 800480e:	e7e1      	b.n	80047d4 <_reclaim_reent+0x1c>
 8004810:	6961      	ldr	r1, [r4, #20]
 8004812:	b111      	cbz	r1, 800481a <_reclaim_reent+0x62>
 8004814:	4620      	mov	r0, r4
 8004816:	f000 f861 	bl	80048dc <_free_r>
 800481a:	69e1      	ldr	r1, [r4, #28]
 800481c:	b111      	cbz	r1, 8004824 <_reclaim_reent+0x6c>
 800481e:	4620      	mov	r0, r4
 8004820:	f000 f85c 	bl	80048dc <_free_r>
 8004824:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004826:	b111      	cbz	r1, 800482e <_reclaim_reent+0x76>
 8004828:	4620      	mov	r0, r4
 800482a:	f000 f857 	bl	80048dc <_free_r>
 800482e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004830:	b111      	cbz	r1, 8004838 <_reclaim_reent+0x80>
 8004832:	4620      	mov	r0, r4
 8004834:	f000 f852 	bl	80048dc <_free_r>
 8004838:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800483a:	b111      	cbz	r1, 8004842 <_reclaim_reent+0x8a>
 800483c:	4620      	mov	r0, r4
 800483e:	f000 f84d 	bl	80048dc <_free_r>
 8004842:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004844:	b111      	cbz	r1, 800484c <_reclaim_reent+0x94>
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f848 	bl	80048dc <_free_r>
 800484c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800484e:	b111      	cbz	r1, 8004856 <_reclaim_reent+0x9e>
 8004850:	4620      	mov	r0, r4
 8004852:	f000 f843 	bl	80048dc <_free_r>
 8004856:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004858:	b111      	cbz	r1, 8004860 <_reclaim_reent+0xa8>
 800485a:	4620      	mov	r0, r4
 800485c:	f000 f83e 	bl	80048dc <_free_r>
 8004860:	6a23      	ldr	r3, [r4, #32]
 8004862:	b11b      	cbz	r3, 800486c <_reclaim_reent+0xb4>
 8004864:	4620      	mov	r0, r4
 8004866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800486a:	4718      	bx	r3
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	bf00      	nop
 8004870:	20000010 	.word	0x20000010

08004874 <__libc_init_array>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	2600      	movs	r6, #0
 8004878:	4d0c      	ldr	r5, [pc, #48]	@ (80048ac <__libc_init_array+0x38>)
 800487a:	4c0d      	ldr	r4, [pc, #52]	@ (80048b0 <__libc_init_array+0x3c>)
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	42a6      	cmp	r6, r4
 8004882:	d109      	bne.n	8004898 <__libc_init_array+0x24>
 8004884:	f000 f87e 	bl	8004984 <_init>
 8004888:	2600      	movs	r6, #0
 800488a:	4d0a      	ldr	r5, [pc, #40]	@ (80048b4 <__libc_init_array+0x40>)
 800488c:	4c0a      	ldr	r4, [pc, #40]	@ (80048b8 <__libc_init_array+0x44>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	42a6      	cmp	r6, r4
 8004894:	d105      	bne.n	80048a2 <__libc_init_array+0x2e>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	f855 3b04 	ldr.w	r3, [r5], #4
 800489c:	4798      	blx	r3
 800489e:	3601      	adds	r6, #1
 80048a0:	e7ee      	b.n	8004880 <__libc_init_array+0xc>
 80048a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a6:	4798      	blx	r3
 80048a8:	3601      	adds	r6, #1
 80048aa:	e7f2      	b.n	8004892 <__libc_init_array+0x1e>
 80048ac:	08004aa8 	.word	0x08004aa8
 80048b0:	08004aa8 	.word	0x08004aa8
 80048b4:	08004aa8 	.word	0x08004aa8
 80048b8:	08004aac 	.word	0x08004aac

080048bc <__retarget_lock_acquire_recursive>:
 80048bc:	4770      	bx	lr

080048be <__retarget_lock_release_recursive>:
 80048be:	4770      	bx	lr

080048c0 <memcpy>:
 80048c0:	440a      	add	r2, r1
 80048c2:	4291      	cmp	r1, r2
 80048c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048c8:	d100      	bne.n	80048cc <memcpy+0xc>
 80048ca:	4770      	bx	lr
 80048cc:	b510      	push	{r4, lr}
 80048ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d2:	4291      	cmp	r1, r2
 80048d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d8:	d1f9      	bne.n	80048ce <memcpy+0xe>
 80048da:	bd10      	pop	{r4, pc}

080048dc <_free_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4605      	mov	r5, r0
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d040      	beq.n	8004966 <_free_r+0x8a>
 80048e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e8:	1f0c      	subs	r4, r1, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bfb8      	it	lt
 80048ee:	18e4      	addlt	r4, r4, r3
 80048f0:	f000 f83c 	bl	800496c <__malloc_lock>
 80048f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <_free_r+0x8c>)
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	b933      	cbnz	r3, 8004908 <_free_r+0x2c>
 80048fa:	6063      	str	r3, [r4, #4]
 80048fc:	6014      	str	r4, [r2, #0]
 80048fe:	4628      	mov	r0, r5
 8004900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004904:	f000 b838 	b.w	8004978 <__malloc_unlock>
 8004908:	42a3      	cmp	r3, r4
 800490a:	d908      	bls.n	800491e <_free_r+0x42>
 800490c:	6820      	ldr	r0, [r4, #0]
 800490e:	1821      	adds	r1, r4, r0
 8004910:	428b      	cmp	r3, r1
 8004912:	bf01      	itttt	eq
 8004914:	6819      	ldreq	r1, [r3, #0]
 8004916:	685b      	ldreq	r3, [r3, #4]
 8004918:	1809      	addeq	r1, r1, r0
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	e7ed      	b.n	80048fa <_free_r+0x1e>
 800491e:	461a      	mov	r2, r3
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b10b      	cbz	r3, 8004928 <_free_r+0x4c>
 8004924:	42a3      	cmp	r3, r4
 8004926:	d9fa      	bls.n	800491e <_free_r+0x42>
 8004928:	6811      	ldr	r1, [r2, #0]
 800492a:	1850      	adds	r0, r2, r1
 800492c:	42a0      	cmp	r0, r4
 800492e:	d10b      	bne.n	8004948 <_free_r+0x6c>
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	4401      	add	r1, r0
 8004934:	1850      	adds	r0, r2, r1
 8004936:	4283      	cmp	r3, r0
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	d1e0      	bne.n	80048fe <_free_r+0x22>
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4408      	add	r0, r1
 8004942:	6010      	str	r0, [r2, #0]
 8004944:	6053      	str	r3, [r2, #4]
 8004946:	e7da      	b.n	80048fe <_free_r+0x22>
 8004948:	d902      	bls.n	8004950 <_free_r+0x74>
 800494a:	230c      	movs	r3, #12
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	e7d6      	b.n	80048fe <_free_r+0x22>
 8004950:	6820      	ldr	r0, [r4, #0]
 8004952:	1821      	adds	r1, r4, r0
 8004954:	428b      	cmp	r3, r1
 8004956:	bf01      	itttt	eq
 8004958:	6819      	ldreq	r1, [r3, #0]
 800495a:	685b      	ldreq	r3, [r3, #4]
 800495c:	1809      	addeq	r1, r1, r0
 800495e:	6021      	streq	r1, [r4, #0]
 8004960:	6063      	str	r3, [r4, #4]
 8004962:	6054      	str	r4, [r2, #4]
 8004964:	e7cb      	b.n	80048fe <_free_r+0x22>
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20001c40 	.word	0x20001c40

0800496c <__malloc_lock>:
 800496c:	4801      	ldr	r0, [pc, #4]	@ (8004974 <__malloc_lock+0x8>)
 800496e:	f7ff bfa5 	b.w	80048bc <__retarget_lock_acquire_recursive>
 8004972:	bf00      	nop
 8004974:	20001c3c 	.word	0x20001c3c

08004978 <__malloc_unlock>:
 8004978:	4801      	ldr	r0, [pc, #4]	@ (8004980 <__malloc_unlock+0x8>)
 800497a:	f7ff bfa0 	b.w	80048be <__retarget_lock_release_recursive>
 800497e:	bf00      	nop
 8004980:	20001c3c 	.word	0x20001c3c

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
